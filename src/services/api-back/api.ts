/* tslint:disable */
/* eslint-disable */
/**
 * Nex Event API
 * Utilize essa documentação para realizar a integração com o nosso sistema
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthLoginDto
 */
export interface AuthLoginDto {
    /**
     * 
     * @type {string}
     * @memberof AuthLoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateParticipantQuizDto
 */
export interface CreateParticipantQuizDto {
    /**
     * 
     * @type {boolean}
     * @memberof CreateParticipantQuizDto
     */
    'isAnonimous': boolean;
    /**
     * 
     * @type {Array<CreateParticipantQuizDtoResponsesInner>}
     * @memberof CreateParticipantQuizDto
     */
    'responses': Array<CreateParticipantQuizDtoResponsesInner>;
}
/**
 * 
 * @export
 * @interface CreateParticipantQuizDtoResponsesInner
 */
export interface CreateParticipantQuizDtoResponsesInner {
    /**
     * 
     * @type {string}
     * @memberof CreateParticipantQuizDtoResponsesInner
     */
    'eventQuizQuestionId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateParticipantQuizDtoResponsesInner
     */
    'eventQuizQuestionOptionId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateParticipantQuizDtoResponsesInner
     */
    'rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CreateParticipantQuizDtoResponsesInner
     */
    'response'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateSponsorUserDto
 */
export interface CreateSponsorUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateSponsorUserDto
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof CreateSponsorUserDto
     */
    'secretKey': string;
}
/**
 * 
 * @export
 * @interface EventAllResponseDtoInner
 */
export interface EventAllResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventAllResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventAllResponseDtoInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventAllResponseDtoInner
     */
    'subtitle': string;
    /**
     * 
     * @type {string}
     * @memberof EventAllResponseDtoInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof EventAllResponseDtoInner
     */
    'photo': string;
    /**
     * 
     * @type {any}
     * @memberof EventAllResponseDtoInner
     */
    'startAt': any;
}
/**
 * 
 * @export
 * @interface EventCreateDto
 */
export interface EventCreateDto {
    /**
     * Event name
     * @type {string}
     * @memberof EventCreateDto
     */
    'title': string;
    /**
     * Event description
     * @type {string}
     * @memberof EventCreateDto
     */
    'description': string;
    /**
     * Event public
     * @type {boolean}
     * @memberof EventCreateDto
     */
    'eventPublic'?: boolean;
    /**
     * Event start date
     * @type {string}
     * @memberof EventCreateDto
     */
    'startAt'?: string;
    /**
     * Event end date
     * @type {string}
     * @memberof EventCreateDto
     */
    'endAt'?: string;
    /**
     * Event publish start date
     * @type {string}
     * @memberof EventCreateDto
     */
    'startPublishAt'?: string;
    /**
     * Event publish end date
     * @type {string}
     * @memberof EventCreateDto
     */
    'endPublishAt'?: string;
    /**
     * Event category
     * @type {string}
     * @memberof EventCreateDto
     */
    'category': string;
    /**
     * Event location type
     * @type {string}
     * @memberof EventCreateDto
     */
    'location': EventCreateDtoLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'complement'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDto
     */
    'district'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDto
     */
    'sellOnThePlatform': boolean;
    /**
     * 
     * @type {Array<EventCreateDtoEventScheduleInner>}
     * @memberof EventCreateDto
     */
    'eventSchedule': Array<EventCreateDtoEventScheduleInner>;
    /**
     * 
     * @type {EventCreateDtoEventConfig}
     * @memberof EventCreateDto
     */
    'eventConfig': EventCreateDtoEventConfig;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInner>}
     * @memberof EventCreateDto
     */
    'eventTickets': Array<EventCreateDtoEventTicketsInner>;
}

export const EventCreateDtoLocationEnum = {
    Online: 'ONLINE',
    Undefined: 'UNDEFINED',
    Defined: 'DEFINED'
} as const;

export type EventCreateDtoLocationEnum = typeof EventCreateDtoLocationEnum[keyof typeof EventCreateDtoLocationEnum];

/**
 * 
 * @export
 * @interface EventCreateDtoEventConfig
 */
export interface EventCreateDtoEventConfig {
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventConfig
     */
    'printAutomatic': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventConfig
     */
    'credentialType': EventCreateDtoEventConfigCredentialTypeEnum;
}

export const EventCreateDtoEventConfigCredentialTypeEnum = {
    Void: 'VOID',
    Qrcode: 'QRCODE',
    FacialInSite: 'FACIAL_IN_SITE',
    Facial: 'FACIAL'
} as const;

export type EventCreateDtoEventConfigCredentialTypeEnum = typeof EventCreateDtoEventConfigCredentialTypeEnum[keyof typeof EventCreateDtoEventConfigCredentialTypeEnum];

/**
 * 
 * @export
 * @interface EventCreateDtoEventScheduleInner
 */
export interface EventCreateDtoEventScheduleInner {
    /**
     * Event schedule day
     * @type {string}
     * @memberof EventCreateDtoEventScheduleInner
     */
    'date': string;
    /**
     * Event schedule start hour
     * @type {string}
     * @memberof EventCreateDtoEventScheduleInner
     */
    'startHour': string;
    /**
     * Event schedule end hour
     * @type {string}
     * @memberof EventCreateDtoEventScheduleInner
     */
    'endHour': string;
    /**
     * Event schedule description
     * @type {string}
     * @memberof EventCreateDtoEventScheduleInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface EventCreateDtoEventTicketsInner
 */
export interface EventCreateDtoEventTicketsInner {
    /**
     * Ticket title
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'title': string;
    /**
     * Ticket description
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'isFree': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'isPrivate': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'isBonus': boolean;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketPricesInner>}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'eventTicketPrices': Array<EventCreateDtoEventTicketsInnerEventTicketPricesInner>;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketDaysInner>}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'eventTicketDays': Array<EventCreateDtoEventTicketsInnerEventTicketDaysInner>;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketBonusesInner>}
     * @memberof EventCreateDtoEventTicketsInner
     */
    'eventTicketBonuses'?: Array<EventCreateDtoEventTicketsInnerEventTicketBonusesInner>;
}
/**
 * 
 * @export
 * @interface EventCreateDtoEventTicketsInnerEventTicketBonusesInner
 */
export interface EventCreateDtoEventTicketsInnerEventTicketBonusesInner {
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketBonusesInner
     */
    'ticketTitle': string;
    /**
     * 
     * @type {number}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketBonusesInner
     */
    'qtd': number;
}
/**
 * 
 * @export
 * @interface EventCreateDtoEventTicketsInnerEventTicketDaysInner
 */
export interface EventCreateDtoEventTicketsInnerEventTicketDaysInner {
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketDaysInner
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface EventCreateDtoEventTicketsInnerEventTicketPricesInner
 */
export interface EventCreateDtoEventTicketsInnerEventTicketPricesInner {
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'isPromotion': boolean;
    /**
     * 
     * @type {number}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'batch': number;
    /**
     * 
     * @type {number}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'guests': number;
    /**
     * 
     * @type {number}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'guestBonus': number;
    /**
     * 
     * @type {number}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'passOnFee': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'startPublishAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'endPublishAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventCreateDtoEventTicketsInnerEventTicketPricesInner
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface EventDashboardPanelFinancialDto
 */
export interface EventDashboardPanelFinancialDto {
    /**
     * 
     * @type {number}
     * @memberof EventDashboardPanelFinancialDto
     */
    'eventTotal': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardPanelFinancialDto
     */
    'eventTotalDrawee': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardPanelFinancialDto
     */
    'totalDisponible': number;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardPanelFinancialDto
     */
    'currency': string;
    /**
     * 
     * @type {Array<EventDashboardResponseDtoSellDiaryInner>}
     * @memberof EventDashboardPanelFinancialDto
     */
    'sellDiary': Array<EventDashboardResponseDtoSellDiaryInner>;
    /**
     * 
     * @type {Array<EventDashboardPanelFinancialDtoSellDiaryByTicketInner>}
     * @memberof EventDashboardPanelFinancialDto
     */
    'sellDiaryByTicket': Array<EventDashboardPanelFinancialDtoSellDiaryByTicketInner>;
}
/**
 * 
 * @export
 * @interface EventDashboardPanelFinancialDtoSellDiaryByTicketInner
 */
export interface EventDashboardPanelFinancialDtoSellDiaryByTicketInner {
    /**
     * 
     * @type {string}
     * @memberof EventDashboardPanelFinancialDtoSellDiaryByTicketInner
     */
    'ticket': string;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardPanelFinancialDtoSellDiaryByTicketInner
     */
    'total': number;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardPanelFinancialDtoSellDiaryByTicketInner
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface EventDashboardResponseDto
 */
export interface EventDashboardResponseDto {
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'paymentStatus': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'paymentUrl': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'status': EventDashboardResponseDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventStaff': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventViews': number;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'eventCity': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'eventState': string;
    /**
     * 
     * @type {any}
     * @memberof EventDashboardResponseDto
     */
    'startAt': any;
    /**
     * 
     * @type {boolean}
     * @memberof EventDashboardResponseDto
     */
    'public': boolean;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventParticipantsCount': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventParticipantLimitCount': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventParcitipantAccreditationsCount': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventParcitipantAccreditationsPercentual': number;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDto
     */
    'currency': string;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDto
     */
    'eventTotal': number;
    /**
     * 
     * @type {Array<EventDashboardResponseDtoEventTicketsInner>}
     * @memberof EventDashboardResponseDto
     */
    'eventTickets': Array<EventDashboardResponseDtoEventTicketsInner>;
    /**
     * 
     * @type {Array<EventDashboardResponseDtoEventTicketPercentualSellInner>}
     * @memberof EventDashboardResponseDto
     */
    'eventTicketPercentualSell': Array<EventDashboardResponseDtoEventTicketPercentualSellInner>;
    /**
     * 
     * @type {Array<EventDashboardResponseDtoSellDiaryInner>}
     * @memberof EventDashboardResponseDto
     */
    'sellDiary': Array<EventDashboardResponseDtoSellDiaryInner>;
}

export const EventDashboardResponseDtoStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;

export type EventDashboardResponseDtoStatusEnum = typeof EventDashboardResponseDtoStatusEnum[keyof typeof EventDashboardResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface EventDashboardResponseDtoEventTicketPercentualSellInner
 */
export interface EventDashboardResponseDtoEventTicketPercentualSellInner {
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDtoEventTicketPercentualSellInner
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDtoEventTicketPercentualSellInner
     */
    'percentual': number;
}
/**
 * 
 * @export
 * @interface EventDashboardResponseDtoEventTicketsInner
 */
export interface EventDashboardResponseDtoEventTicketsInner {
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDtoEventTicketsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDtoEventTicketsInner
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDtoEventTicketsInner
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDtoEventTicketsInner
     */
    'partQtd': number;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDtoEventTicketsInner
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface EventDashboardResponseDtoSellDiaryInner
 */
export interface EventDashboardResponseDtoSellDiaryInner {
    /**
     * 
     * @type {string}
     * @memberof EventDashboardResponseDtoSellDiaryInner
     */
    'date': string;
    /**
     * 
     * @type {number}
     * @memberof EventDashboardResponseDtoSellDiaryInner
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface EventNetworksProducerCreateDtoInner
 */
export interface EventNetworksProducerCreateDtoInner {
    /**
     * Network name
     * @type {string}
     * @memberof EventNetworksProducerCreateDtoInner
     */
    'network': string;
    /**
     * Network url
     * @type {string}
     * @memberof EventNetworksProducerCreateDtoInner
     */
    'uri': string;
    /**
     * Network description
     * @type {string}
     * @memberof EventNetworksProducerCreateDtoInner
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface EventNetworksProducerResponseDtoInner
 */
export interface EventNetworksProducerResponseDtoInner {
    /**
     * 
     * @type {number}
     * @memberof EventNetworksProducerResponseDtoInner
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EventNetworksProducerResponseDtoInner
     */
    'network': string;
    /**
     * 
     * @type {string}
     * @memberof EventNetworksProducerResponseDtoInner
     */
    'uri': string;
    /**
     * 
     * @type {string}
     * @memberof EventNetworksProducerResponseDtoInner
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface EventNetworksResponse
 */
export interface EventNetworksResponse {
    /**
     * 
     * @type {Array<EventNetworksProducerResponseDtoInner>}
     * @memberof EventNetworksResponse
     */
    'data': Array<EventNetworksProducerResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventNetworksResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventParticipantCreateDto
 */
export interface EventParticipantCreateDto {
    /**
     * Event participant name
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'name': string;
    /**
     * Event participant document
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'document'?: string | null;
    /**
     * Event participant phone country
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'phoneCountry'?: string | null;
    /**
     * Event participant phone number
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'phoneNumber'?: string | null;
    /**
     * Event participant state
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'state'?: string | null;
    /**
     * Event participant state
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'city'?: string | null;
    /**
     * Event participant country
     * @type {string}
     * @memberof EventParticipantCreateDto
     */
    'country'?: string | null;
    /**
     * 
     * @type {Array<EventParticipantCreateDtoNetworksInner>}
     * @memberof EventParticipantCreateDto
     */
    'networks'?: Array<EventParticipantCreateDtoNetworksInner>;
}
/**
 * 
 * @export
 * @interface EventParticipantCreateDtoNetworksInner
 */
export interface EventParticipantCreateDtoNetworksInner {
    /**
     * User network type
     * @type {string}
     * @memberof EventParticipantCreateDtoNetworksInner
     */
    'network': EventParticipantCreateDtoNetworksInnerNetworkEnum;
    /**
     * User network name
     * @type {string}
     * @memberof EventParticipantCreateDtoNetworksInner
     */
    'username': string;
}

export const EventParticipantCreateDtoNetworksInnerNetworkEnum = {
    Instagram: 'INSTAGRAM',
    Facebook: 'FACEBOOK',
    Linkedin: 'LINKEDIN',
    Snapchat: 'SNAPCHAT',
    Twitter: 'TWITTER',
    Threads: 'THREADS',
    Tiktok: 'TIKTOK',
    Github: 'GITHUB'
} as const;

export type EventParticipantCreateDtoNetworksInnerNetworkEnum = typeof EventParticipantCreateDtoNetworksInnerNetworkEnum[keyof typeof EventParticipantCreateDtoNetworksInnerNetworkEnum];

/**
 * 
 * @export
 * @interface EventParticipantResponseDto
 */
export interface EventParticipantResponseDto {
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDto
     */
    'quizParticipantId': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDto
     */
    'quizTitle': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDto
     */
    'participantName': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDto
     */
    'participantEmail': string;
    /**
     * 
     * @type {Array<EventParticipantResponseDtoQuestionsResponsesInner>}
     * @memberof EventParticipantResponseDto
     */
    'questionsResponses': Array<EventParticipantResponseDtoQuestionsResponsesInner>;
}
/**
 * 
 * @export
 * @interface EventParticipantResponseDtoQuestionsResponsesInner
 */
export interface EventParticipantResponseDtoQuestionsResponsesInner {
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'responseId': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'eventQuizQuestionId': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'questionDescription': string;
    /**
     * 
     * @type {number}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'sequential': number;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'questionType': EventParticipantResponseDtoQuestionsResponsesInnerQuestionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'multipleChoice': boolean;
    /**
     * 
     * @type {number}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'response'?: string | null;
    /**
     * 
     * @type {Array<EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner>}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInner
     */
    'eventQuizQuestionOption'?: Array<EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner>;
}

export const EventParticipantResponseDtoQuestionsResponsesInnerQuestionTypeEnum = {
    MultipleChoice: 'MULTIPLE_CHOICE',
    Rating: 'RATING',
    Descriptive: 'DESCRIPTIVE'
} as const;

export type EventParticipantResponseDtoQuestionsResponsesInnerQuestionTypeEnum = typeof EventParticipantResponseDtoQuestionsResponsesInnerQuestionTypeEnum[keyof typeof EventParticipantResponseDtoQuestionsResponsesInnerQuestionTypeEnum];

/**
 * 
 * @export
 * @interface EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner
 */
export interface EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner {
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner
     */
    'eventQuizQuestionOptionId': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner
     */
    'optionDescription': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner
     */
    'isOther': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventParticipantResponseDtoQuestionsResponsesInnerEventQuizQuestionOptionInner
     */
    'userResponse': boolean;
}
/**
 * 
 * @export
 * @interface EventParticipantsResponseDtoInner
 */
export interface EventParticipantsResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'status': EventParticipantsResponseDtoInnerStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'ticketName': string;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'facial': string;
    /**
     * 
     * @type {any}
     * @memberof EventParticipantsResponseDtoInner
     */
    'checkInDate': any | null;
    /**
     * 
     * @type {boolean}
     * @memberof EventParticipantsResponseDtoInner
     */
    'payment': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventParticipantsResponseDtoInner
     */
    'lastStatus': string;
}

export const EventParticipantsResponseDtoInnerStatusEnum = {
    CheckInEarly: 'CHECK_IN_EARLY',
    CheckIn: 'CHECK_IN',
    CheckOut: 'CHECK_OUT',
    Canceled: 'CANCELED',
    Enable: 'ENABLE'
} as const;

export type EventParticipantsResponseDtoInnerStatusEnum = typeof EventParticipantsResponseDtoInnerStatusEnum[keyof typeof EventParticipantsResponseDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventPrintAllPartsDtoInner
 */
export interface EventPrintAllPartsDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventPrintAllPartsDtoInner
     */
    'partId': string;
    /**
     * 
     * @type {string}
     * @memberof EventPrintAllPartsDtoInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventPrintAllPartsDtoInner
     */
    'ticket': string;
    /**
     * 
     * @type {string}
     * @memberof EventPrintAllPartsDtoInner
     */
    'qrcode': string;
}
/**
 * 
 * @export
 * @interface EventProducerCreateStaffDto
 */
export interface EventProducerCreateStaffDto {
    /**
     * 
     * @type {string}
     * @memberof EventProducerCreateStaffDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface EventProducerRecommendedStaffDto
 */
export interface EventProducerRecommendedStaffDto {
    /**
     * 
     * @type {string}
     * @memberof EventProducerRecommendedStaffDto
     */
    'staffId': string;
    /**
     * 
     * @type {string}
     * @memberof EventProducerRecommendedStaffDto
     */
    'staffName': string;
    /**
     * 
     * @type {string}
     * @memberof EventProducerRecommendedStaffDto
     */
    'staffEmail': string;
    /**
     * 
     * @type {number}
     * @memberof EventProducerRecommendedStaffDto
     */
    'eventCount': number;
    /**
     * 
     * @type {Array<EventProducerRecommendedStaffDtoEventsInner>}
     * @memberof EventProducerRecommendedStaffDto
     */
    'events': Array<EventProducerRecommendedStaffDtoEventsInner>;
}
/**
 * 
 * @export
 * @interface EventProducerRecommendedStaffDtoEventsInner
 */
export interface EventProducerRecommendedStaffDtoEventsInner {
    /**
     * 
     * @type {string}
     * @memberof EventProducerRecommendedStaffDtoEventsInner
     */
    'eventId': string;
    /**
     * 
     * @type {string}
     * @memberof EventProducerRecommendedStaffDtoEventsInner
     */
    'eventTitle': string;
    /**
     * 
     * @type {any}
     * @memberof EventProducerRecommendedStaffDtoEventsInner
     */
    'eventDate': any;
}
/**
 * 
 * @export
 * @interface EventProducerRecommendedStaffs
 */
export interface EventProducerRecommendedStaffs {
    /**
     * 
     * @type {Array<EventProducerRecommendedStaffDto>}
     * @memberof EventProducerRecommendedStaffs
     */
    'data': Array<EventProducerRecommendedStaffDto>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventProducerRecommendedStaffs
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventProducerResponseListStaffDtoInner
 */
export interface EventProducerResponseListStaffDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventProducerResponseListStaffDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventProducerResponseListStaffDtoInner
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof EventProducerResponseListStaffDtoInner
     */
    'status': EventProducerResponseListStaffDtoInnerStatusEnum;
}

export const EventProducerResponseListStaffDtoInnerStatusEnum = {
    UserNotAccepted: 'USER_NOT_ACCEPTED',
    UserRefused: 'USER_REFUSED',
    UserAccepted: 'USER_ACCEPTED',
    NotUser: 'NOT_USER'
} as const;

export type EventProducerResponseListStaffDtoInnerStatusEnum = typeof EventProducerResponseListStaffDtoInnerStatusEnum[keyof typeof EventProducerResponseListStaffDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventProducerUpdateDto
 */
export interface EventProducerUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'category'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'location'?: EventProducerUpdateDtoLocationEnum | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'country'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'complement'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventProducerUpdateDto
     */
    'district'?: string | null;
}

export const EventProducerUpdateDtoLocationEnum = {
    Online: 'ONLINE',
    Undefined: 'UNDEFINED',
    Defined: 'DEFINED'
} as const;

export type EventProducerUpdateDtoLocationEnum = typeof EventProducerUpdateDtoLocationEnum[keyof typeof EventProducerUpdateDtoLocationEnum];

/**
 * 
 * @export
 * @interface EventQuizCreateDto
 */
export interface EventQuizCreateDto {
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDto
     */
    'startAt': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDto
     */
    'endAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventQuizCreateDto
     */
    'anonimousResponse': boolean;
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDto
     */
    'status': EventQuizCreateDtoStatusEnum;
    /**
     * 
     * @type {Array<EventQuizCreateDtoQuestionsInner>}
     * @memberof EventQuizCreateDto
     */
    'questions': Array<EventQuizCreateDtoQuestionsInner>;
}

export const EventQuizCreateDtoStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;

export type EventQuizCreateDtoStatusEnum = typeof EventQuizCreateDtoStatusEnum[keyof typeof EventQuizCreateDtoStatusEnum];

/**
 * 
 * @export
 * @interface EventQuizCreateDtoQuestionsInner
 */
export interface EventQuizCreateDtoQuestionsInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'sequential': number;
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'questionType': EventQuizCreateDtoQuestionsInnerQuestionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'multipleChoice': boolean;
    /**
     * 
     * @type {Array<EventQuizCreateDtoQuestionsInnerQuestionOptionsInner>}
     * @memberof EventQuizCreateDtoQuestionsInner
     */
    'questionOptions'?: Array<EventQuizCreateDtoQuestionsInnerQuestionOptionsInner>;
}

export const EventQuizCreateDtoQuestionsInnerQuestionTypeEnum = {
    MultipleChoice: 'MULTIPLE_CHOICE',
    Rating: 'RATING',
    Descriptive: 'DESCRIPTIVE'
} as const;

export type EventQuizCreateDtoQuestionsInnerQuestionTypeEnum = typeof EventQuizCreateDtoQuestionsInnerQuestionTypeEnum[keyof typeof EventQuizCreateDtoQuestionsInnerQuestionTypeEnum];

/**
 * 
 * @export
 * @interface EventQuizCreateDtoQuestionsInnerQuestionOptionsInner
 */
export interface EventQuizCreateDtoQuestionsInnerQuestionOptionsInner {
    /**
     * 
     * @type {number}
     * @memberof EventQuizCreateDtoQuestionsInnerQuestionOptionsInner
     */
    'sequential': number;
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreateDtoQuestionsInnerQuestionOptionsInner
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventQuizCreateDtoQuestionsInnerQuestionOptionsInner
     */
    'isOther': boolean;
}
/**
 * 
 * @export
 * @interface EventQuizCreatedResponseDto
 */
export interface EventQuizCreatedResponseDto {
    /**
     * 
     * @type {string}
     * @memberof EventQuizCreatedResponseDto
     */
    'ok': string;
}
/**
 * 
 * @export
 * @interface EventQuizDashboarDto
 */
export interface EventQuizDashboarDto {
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDto
     */
    'title': string;
    /**
     * 
     * @type {Array<EventQuizDashboarDtoMultipleChoiceInner>}
     * @memberof EventQuizDashboarDto
     */
    'multipleChoice'?: Array<EventQuizDashboarDtoMultipleChoiceInner>;
    /**
     * 
     * @type {Array<EventQuizDashboarDtoRatingInner>}
     * @memberof EventQuizDashboarDto
     */
    'rating'?: Array<EventQuizDashboarDtoRatingInner>;
}
/**
 * 
 * @export
 * @interface EventQuizDashboarDtoMultipleChoiceInner
 */
export interface EventQuizDashboarDtoMultipleChoiceInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDtoMultipleChoiceInner
     */
    'questionId': string;
    /**
     * 
     * @type {number}
     * @memberof EventQuizDashboarDtoMultipleChoiceInner
     */
    'totalResponses': number;
    /**
     * 
     * @type {Array<EventQuizDashboarDtoMultipleChoiceInnerOptionsInner>}
     * @memberof EventQuizDashboarDtoMultipleChoiceInner
     */
    'options': Array<EventQuizDashboarDtoMultipleChoiceInnerOptionsInner>;
}
/**
 * 
 * @export
 * @interface EventQuizDashboarDtoMultipleChoiceInnerOptionsInner
 */
export interface EventQuizDashboarDtoMultipleChoiceInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDtoMultipleChoiceInnerOptionsInner
     */
    'optionId': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDtoMultipleChoiceInnerOptionsInner
     */
    'optionTitle': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDtoMultipleChoiceInnerOptionsInner
     */
    'optionReponseTotal': string;
}
/**
 * 
 * @export
 * @interface EventQuizDashboarDtoRatingInner
 */
export interface EventQuizDashboarDtoRatingInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizDashboarDtoRatingInner
     */
    'questionId': string;
    /**
     * 
     * @type {number}
     * @memberof EventQuizDashboarDtoRatingInner
     */
    'totalResponses': number;
    /**
     * 
     * @type {Array<EventQuizDashboarDtoRatingInnerRatingsInner>}
     * @memberof EventQuizDashboarDtoRatingInner
     */
    'ratings': Array<EventQuizDashboarDtoRatingInnerRatingsInner>;
}
/**
 * 
 * @export
 * @interface EventQuizDashboarDtoRatingInnerRatingsInner
 */
export interface EventQuizDashboarDtoRatingInnerRatingsInner {
    /**
     * 
     * @type {number}
     * @memberof EventQuizDashboarDtoRatingInnerRatingsInner
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof EventQuizDashboarDtoRatingInnerRatingsInner
     */
    'ratingResponseTotal': number;
}
/**
 * 
 * @export
 * @interface EventQuizFindAllResponse
 */
export interface EventQuizFindAllResponse {
    /**
     * 
     * @type {Array<EventQuizFindAllResponseDtoInner>}
     * @memberof EventQuizFindAllResponse
     */
    'data': Array<EventQuizFindAllResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventQuizFindAllResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventQuizFindAllResponseDtoInner
 */
export interface EventQuizFindAllResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'title': string;
    /**
     * 
     * @type {any}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'startAt': any;
    /**
     * 
     * @type {any}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'endAt': any;
    /**
     * 
     * @type {string}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'status': EventQuizFindAllResponseDtoInnerStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof EventQuizFindAllResponseDtoInner
     */
    'responses': number;
}

export const EventQuizFindAllResponseDtoInnerStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;

export type EventQuizFindAllResponseDtoInnerStatusEnum = typeof EventQuizFindAllResponseDtoInnerStatusEnum[keyof typeof EventQuizFindAllResponseDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventQuizParticipantsResponse
 */
export interface EventQuizParticipantsResponse {
    /**
     * 
     * @type {Array<EventQuizParticipantsResponseDtoInner>}
     * @memberof EventQuizParticipantsResponse
     */
    'data': Array<EventQuizParticipantsResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventQuizParticipantsResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventQuizParticipantsResponseDtoInner
 */
export interface EventQuizParticipantsResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventQuizParticipantsResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizParticipantsResponseDtoInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventQuizParticipantsResponseDtoInner
     */
    'responses': string;
}
/**
 * 
 * @export
 * @interface EventStaffAllResponseDtoInner
 */
export interface EventStaffAllResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'subtitle': string;
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'photo': string;
    /**
     * 
     * @type {any}
     * @memberof EventStaffAllResponseDtoInner
     */
    'startAt': any;
    /**
     * 
     * @type {string}
     * @memberof EventStaffAllResponseDtoInner
     */
    'status': EventStaffAllResponseDtoInnerStatusEnum;
}

export const EventStaffAllResponseDtoInnerStatusEnum = {
    UserNotAccepted: 'USER_NOT_ACCEPTED',
    UserRefused: 'USER_REFUSED',
    UserAccepted: 'USER_ACCEPTED',
    NotUser: 'NOT_USER'
} as const;

export type EventStaffAllResponseDtoInnerStatusEnum = typeof EventStaffAllResponseDtoInnerStatusEnum[keyof typeof EventStaffAllResponseDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventStaffsResponse
 */
export interface EventStaffsResponse {
    /**
     * 
     * @type {Array<EventProducerResponseListStaffDtoInner>}
     * @memberof EventStaffsResponse
     */
    'data': Array<EventProducerResponseListStaffDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventStaffsResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventTicketCouponDashboardDto
 */
export interface EventTicketCouponDashboardDto {
    /**
     * 
     * @type {number}
     * @memberof EventTicketCouponDashboardDto
     */
    'cuponsCreated': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketCouponDashboardDto
     */
    'cuponsActives': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketCouponDashboardDto
     */
    'cuponsExpired': number;
}
/**
 * 
 * @export
 * @interface EventTicketCouponResponseDto
 */
export interface EventTicketCouponResponseDto {
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponResponseDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponResponseDto
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof EventTicketCouponResponseDto
     */
    'percentOff': number;
    /**
     * 
     * @type {any}
     * @memberof EventTicketCouponResponseDto
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof EventTicketCouponResponseDto
     */
    'expireAt': any;
    /**
     * 
     * @type {Array<UserProducerResponseDtoEventsInner>}
     * @memberof EventTicketCouponResponseDto
     */
    'tickets': Array<UserProducerResponseDtoEventsInner>;
}
/**
 * 
 * @export
 * @interface EventTicketCouponsDto
 */
export interface EventTicketCouponsDto {
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponsDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponsDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponsDto
     */
    'expireAt': string;
    /**
     * 
     * @type {Array<EventTicketCouponsDtoEventTicketsIdInner>}
     * @memberof EventTicketCouponsDto
     */
    'eventTicketsId': Array<EventTicketCouponsDtoEventTicketsIdInner>;
    /**
     * 
     * @type {number}
     * @memberof EventTicketCouponsDto
     */
    'percentOff': number;
}
/**
 * 
 * @export
 * @interface EventTicketCouponsDtoEventTicketsIdInner
 */
export interface EventTicketCouponsDtoEventTicketsIdInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketCouponsDtoEventTicketsIdInner
     */
    'ticketId': string;
}
/**
 * 
 * @export
 * @interface EventTicketCouponsResponse
 */
export interface EventTicketCouponsResponse {
    /**
     * 
     * @type {Array<EventTicketCouponResponseDto>}
     * @memberof EventTicketCouponsResponse
     */
    'data': Array<EventTicketCouponResponseDto>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventTicketCouponsResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventTicketCreateDto
 */
export interface EventTicketCreateDto {
    /**
     * Ticket title
     * @type {string}
     * @memberof EventTicketCreateDto
     */
    'title': string;
    /**
     * Ticket description
     * @type {string}
     * @memberof EventTicketCreateDto
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketCreateDto
     */
    'isFree': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketCreateDto
     */
    'isPrivate': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketCreateDto
     */
    'isBonus': boolean;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketPricesInner>}
     * @memberof EventTicketCreateDto
     */
    'eventTicketPrices': Array<EventCreateDtoEventTicketsInnerEventTicketPricesInner>;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketDaysInner>}
     * @memberof EventTicketCreateDto
     */
    'eventTicketDays': Array<EventCreateDtoEventTicketsInnerEventTicketDaysInner>;
    /**
     * 
     * @type {Array<EventCreateDtoEventTicketsInnerEventTicketBonusesInner>}
     * @memberof EventTicketCreateDto
     */
    'eventTicketBonuses'?: Array<EventCreateDtoEventTicketsInnerEventTicketBonusesInner>;
}
/**
 * 
 * @export
 * @interface EventTicketDashboardResponseDtoInner
 */
export interface EventTicketDashboardResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'status': EventTicketDashboardResponseDtoInnerStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'priceLiquid': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'participantsCount': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'ticketLimit': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'ticketPercentualSell': number;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'isBonus': boolean;
    /**
     * 
     * @type {Array<EventTicketDashboardResponseDtoInnerTicketBatchInner>}
     * @memberof EventTicketDashboardResponseDtoInner
     */
    'ticketBatch': Array<EventTicketDashboardResponseDtoInnerTicketBatchInner>;
}

export const EventTicketDashboardResponseDtoInnerStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;

export type EventTicketDashboardResponseDtoInnerStatusEnum = typeof EventTicketDashboardResponseDtoInnerStatusEnum[keyof typeof EventTicketDashboardResponseDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventTicketDashboardResponseDtoInnerTicketBatchInner
 */
export interface EventTicketDashboardResponseDtoInnerTicketBatchInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'batch': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'sells': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'limit': number;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'currency': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'isPrivate': boolean;
    /**
     * 
     * @type {Array<EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner>}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInner
     */
    'link': Array<EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner>;
}
/**
 * 
 * @export
 * @interface EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
 */
export interface EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'eventTicketId': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'eventTicketPriceId': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'userTicketId': string;
    /**
     * 
     * @type {boolean}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'isBonus': boolean;
    /**
     * 
     * @type {number}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'invite': number;
    /**
     * 
     * @type {string}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'status': EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInnerStatusEnum;
    /**
     * 
     * @type {any}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInner
     */
    'updatedAt': any;
}

export const EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInnerStatusEnum = {
    Enable: 'ENABLE',
    Full: 'FULL',
    PartFull: 'PART_FULL'
} as const;

export type EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInnerStatusEnum = typeof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInnerStatusEnum[keyof typeof EventTicketDashboardResponseDtoInnerTicketBatchInnerLinkInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventTicketInfoDto
 */
export interface EventTicketInfoDto {
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventPhoto': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventTitle': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventDescription': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventState': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventCity': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventAddress': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventNumber': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventDistrict': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventComplement': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventLatitude': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDto
     */
    'eventLongitude': string;
    /**
     * 
     * @type {any}
     * @memberof EventTicketInfoDto
     */
    'eventStartAt': any;
    /**
     * 
     * @type {any}
     * @memberof EventTicketInfoDto
     */
    'eventEndAt': any;
    /**
     * 
     * @type {Array<EventTicketInfoDtoTicketsInner>}
     * @memberof EventTicketInfoDto
     */
    'tickets': Array<EventTicketInfoDtoTicketsInner>;
    /**
     * 
     * @type {Array<EventTicketInfoDtoGuestsInner>}
     * @memberof EventTicketInfoDto
     */
    'guests'?: Array<EventTicketInfoDtoGuestsInner> | null;
    /**
     * 
     * @type {Array<EventTicketInfoDtoTicketsInnerTicketGiftsInner>}
     * @memberof EventTicketInfoDto
     */
    'links': Array<EventTicketInfoDtoTicketsInnerTicketGiftsInner>;
}
/**
 * 
 * @export
 * @interface EventTicketInfoDtoGuestsInner
 */
export interface EventTicketInfoDtoGuestsInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoGuestsInner
     */
    'participantId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoGuestsInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoGuestsInner
     */
    'ticketName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoGuestsInner
     */
    'document'?: string | null;
}
/**
 * 
 * @export
 * @interface EventTicketInfoDtoTicketsInner
 */
export interface EventTicketInfoDtoTicketsInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'eventParticipantId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'eventParticipantQrcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'eventParticipantDocument'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'eventParticipantName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'eventTicketTitle'?: string | null;
    /**
     * 
     * @type {Array<EventTicketInfoDtoTicketsInnerTicketGiftsInner>}
     * @memberof EventTicketInfoDtoTicketsInner
     */
    'ticketGifts': Array<EventTicketInfoDtoTicketsInnerTicketGiftsInner>;
}
/**
 * 
 * @export
 * @interface EventTicketInfoDtoTicketsInnerTicketGiftsInner
 */
export interface EventTicketInfoDtoTicketsInnerTicketGiftsInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInnerTicketGiftsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketInfoDtoTicketsInnerTicketGiftsInner
     */
    'ticketName': string;
    /**
     * 
     * @type {number}
     * @memberof EventTicketInfoDtoTicketsInnerTicketGiftsInner
     */
    'guests': number;
    /**
     * 
     * @type {number}
     * @memberof EventTicketInfoDtoTicketsInnerTicketGiftsInner
     */
    'limit': number;
}
/**
 * 
 * @export
 * @interface EventTicketLinkByEmailResponse
 */
export interface EventTicketLinkByEmailResponse {
    /**
     * 
     * @type {EventTicketLinkByEmailResponseDto}
     * @memberof EventTicketLinkByEmailResponse
     */
    'data': EventTicketLinkByEmailResponseDto;
}
/**
 * 
 * @export
 * @interface EventTicketLinkByEmailResponseDto
 */
export interface EventTicketLinkByEmailResponseDto {
    /**
     * 
     * @type {Array<EventTicketLinkByEmailResponseDtoUsersInner>}
     * @memberof EventTicketLinkByEmailResponseDto
     */
    'users': Array<EventTicketLinkByEmailResponseDtoUsersInner>;
    /**
     * 
     * @type {Array<EventTicketLinkByEmailResponseDtoUncompletedInner>}
     * @memberof EventTicketLinkByEmailResponseDto
     */
    'uncompleted': Array<EventTicketLinkByEmailResponseDtoUncompletedInner>;
}
/**
 * 
 * @export
 * @interface EventTicketLinkByEmailResponseDtoUncompletedInner
 */
export interface EventTicketLinkByEmailResponseDtoUncompletedInner {
    /**
     * 
     * @type {number}
     * @memberof EventTicketLinkByEmailResponseDtoUncompletedInner
     */
    'line': number;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkByEmailResponseDtoUncompletedInner
     */
    'reason': string;
}
/**
 * 
 * @export
 * @interface EventTicketLinkByEmailResponseDtoUsersInner
 */
export interface EventTicketLinkByEmailResponseDtoUsersInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkByEmailResponseDtoUsersInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkByEmailResponseDtoUsersInner
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface EventTicketLinkCreateResponseDto
 */
export interface EventTicketLinkCreateResponseDto {
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkCreateResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface EventTicketLinkResponse
 */
export interface EventTicketLinkResponse {
    /**
     * 
     * @type {Array<EventTicketLinkResponseDtoInner>}
     * @memberof EventTicketLinkResponse
     */
    'data': Array<EventTicketLinkResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventTicketLinkResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface EventTicketLinkResponseDtoInner
 */
export interface EventTicketLinkResponseDtoInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'eventTicketId': string;
    /**
     * 
     * @type {number}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'invite': number;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'status': EventTicketLinkResponseDtoInnerStatusEnum;
    /**
     * 
     * @type {any}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'updatedAt': any;
    /**
     * 
     * @type {Array<EventTicketLinkResponseDtoInnerParticipantInner>}
     * @memberof EventTicketLinkResponseDtoInner
     */
    'participant': Array<EventTicketLinkResponseDtoInnerParticipantInner>;
}

export const EventTicketLinkResponseDtoInnerStatusEnum = {
    Enable: 'ENABLE',
    Full: 'FULL',
    PartFull: 'PART_FULL'
} as const;

export type EventTicketLinkResponseDtoInnerStatusEnum = typeof EventTicketLinkResponseDtoInnerStatusEnum[keyof typeof EventTicketLinkResponseDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface EventTicketLinkResponseDtoInnerParticipantInner
 */
export interface EventTicketLinkResponseDtoInnerParticipantInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInnerParticipantInner
     */
    'partId': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInnerParticipantInner
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketLinkResponseDtoInnerParticipantInner
     */
    'userEmail': string;
    /**
     * 
     * @type {any}
     * @memberof EventTicketLinkResponseDtoInnerParticipantInner
     */
    'createdAt': any;
}
/**
 * 
 * @export
 * @interface EventTicketSellDto
 */
export interface EventTicketSellDto {
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDto
     */
    'eventSlug': string;
    /**
     * 
     * @type {Array<EventTicketSellDtoEventTicketsInner>}
     * @memberof EventTicketSellDto
     */
    'eventTickets': Array<EventTicketSellDtoEventTicketsInner>;
    /**
     * 
     * @type {EventTicketSellDtoUser}
     * @memberof EventTicketSellDto
     */
    'user'?: EventTicketSellDtoUser;
    /**
     * 
     * @type {Array<EventParticipantCreateDtoNetworksInner>}
     * @memberof EventTicketSellDto
     */
    'networks'?: Array<EventParticipantCreateDtoNetworksInner>;
}
/**
 * 
 * @export
 * @interface EventTicketSellDtoEventTicketsInner
 */
export interface EventTicketSellDtoEventTicketsInner {
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoEventTicketsInner
     */
    'ticketPriceId': string;
    /**
     * 
     * @type {number}
     * @memberof EventTicketSellDtoEventTicketsInner
     */
    'ticketQuantity': number;
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoEventTicketsInner
     */
    'participant'?: string | null;
}
/**
 * 
 * @export
 * @interface EventTicketSellDtoUser
 */
export interface EventTicketSellDtoUser {
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'email': string;
    /**
     * Event participant phone country
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'phoneCountry'?: string | null;
    /**
     * Event participant phone number
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'document'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof EventTicketSellDtoUser
     */
    'city': string;
}
/**
 * 
 * @export
 * @interface EventTicketUpdateDto
 */
export interface EventTicketUpdateDto {
    /**
     * Ticket title
     * @type {string}
     * @memberof EventTicketUpdateDto
     */
    'title'?: string;
    /**
     * Ticket description
     * @type {string}
     * @memberof EventTicketUpdateDto
     */
    'description'?: string;
    /**
     * Ticket price
     * @type {number}
     * @memberof EventTicketUpdateDto
     */
    'price'?: number;
    /**
     * Ticket color
     * @type {string}
     * @memberof EventTicketUpdateDto
     */
    'color'?: string;
    /**
     * Ticket guests limit
     * @type {number}
     * @memberof EventTicketUpdateDto
     */
    'guests'?: number;
}
/**
 * 
 * @export
 * @interface EventTicketsResponse
 */
export interface EventTicketsResponse {
    /**
     * 
     * @type {Array<EventTicketDashboardResponseDtoInner>}
     * @memberof EventTicketsResponse
     */
    'data': Array<EventTicketDashboardResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EventTicketsResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface FindAllPublicEvents
 */
export interface FindAllPublicEvents {
    /**
     * 
     * @type {Array<FindAllPublicEventsDtoInner>}
     * @memberof FindAllPublicEvents
     */
    'data': Array<FindAllPublicEventsDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof FindAllPublicEvents
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface FindAllPublicEventsDtoInner
 */
export interface FindAllPublicEventsDtoInner {
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof FindAllPublicEventsDtoInner
     */
    'city': string;
    /**
     * 
     * @type {any}
     * @memberof FindAllPublicEventsDtoInner
     */
    'startAt': any;
    /**
     * 
     * @type {any}
     * @memberof FindAllPublicEventsDtoInner
     */
    'endAt': any;
}
/**
 * 
 * @export
 * @interface FindByEmailDto
 */
export interface FindByEmailDto {
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'phoneCountry': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'document': string;
    /**
     * 
     * @type {any}
     * @memberof FindByEmailDto
     */
    'validAt'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof FindByEmailDto
     */
    'userFace'?: string | null;
}
/**
 * 
 * @export
 * @interface FindByFacialResponseDto
 */
export interface FindByFacialResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FindByFacialResponseDto
     */
    'userName': string;
    /**
     * 
     * @type {Array<FindByFacialResponseDtoTicketsInner>}
     * @memberof FindByFacialResponseDto
     */
    'tickets': Array<FindByFacialResponseDtoTicketsInner>;
}
/**
 * 
 * @export
 * @interface FindByFacialResponseDtoTicketsInner
 */
export interface FindByFacialResponseDtoTicketsInner {
    /**
     * 
     * @type {string}
     * @memberof FindByFacialResponseDtoTicketsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindByFacialResponseDtoTicketsInner
     */
    'qrcode': string;
    /**
     * 
     * @type {string}
     * @memberof FindByFacialResponseDtoTicketsInner
     */
    'ticketName': string;
    /**
     * 
     * @type {string}
     * @memberof FindByFacialResponseDtoTicketsInner
     */
    'lastStatus': string;
}
/**
 * 
 * @export
 * @interface FindEventInfoDto
 */
export interface FindEventInfoDto {
    /**
     * 
     * @type {string}
     * @memberof FindEventInfoDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindEventInfoDto
     */
    'title': string;
    /**
     * 
     * @type {any}
     * @memberof FindEventInfoDto
     */
    'startAt': any;
    /**
     * 
     * @type {boolean}
     * @memberof FindEventInfoDto
     */
    'haveDocument': boolean;
}
/**
 * 
 * @export
 * @interface FindOneDashboardParticipantPanelDto
 */
export interface FindOneDashboardParticipantPanelDto {
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventLimit': number;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventParticipantsCount': number;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventParticipantAwaitPayment': number;
    /**
     * 
     * @type {any}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventEndDate': any;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventParcitipantAccreditationsCount': number;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventParcitipantAccreditationsPercentual': number;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventParticipantAccreditationsPerMinute': number;
    /**
     * 
     * @type {Array<FindOneDashboardParticipantPanelDtoEventAverageLocationInner>}
     * @memberof FindOneDashboardParticipantPanelDto
     */
    'eventAverageLocation': Array<FindOneDashboardParticipantPanelDtoEventAverageLocationInner>;
}
/**
 * 
 * @export
 * @interface FindOneDashboardParticipantPanelDtoEventAverageLocationInner
 */
export interface FindOneDashboardParticipantPanelDtoEventAverageLocationInner {
    /**
     * 
     * @type {string}
     * @memberof FindOneDashboardParticipantPanelDtoEventAverageLocationInner
     */
    'region': string;
    /**
     * 
     * @type {number}
     * @memberof FindOneDashboardParticipantPanelDtoEventAverageLocationInner
     */
    'percentage': number;
}
/**
 * 
 * @export
 * @interface FindOnePublicEventsDto
 */
export interface FindOnePublicEventsDto {
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'category': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'description': string;
    /**
     * 
     * @type {any}
     * @memberof FindOnePublicEventsDto
     */
    'startAt': any;
    /**
     * 
     * @type {any}
     * @memberof FindOnePublicEventsDto
     */
    'endAt': any;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'location': FindOnePublicEventsDtoLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'latitude': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'longitude': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'complement': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDto
     */
    'district': string;
    /**
     * 
     * @type {Array<FindOnePublicEventsDtoTicketInner>}
     * @memberof FindOnePublicEventsDto
     */
    'ticket': Array<FindOnePublicEventsDtoTicketInner>;
    /**
     * 
     * @type {FindOnePublicEventsDtoConfig}
     * @memberof FindOnePublicEventsDto
     */
    'config': FindOnePublicEventsDtoConfig;
    /**
     * 
     * @type {FindOnePublicEventsDtoTerm}
     * @memberof FindOnePublicEventsDto
     */
    'term': FindOnePublicEventsDtoTerm;
}

export const FindOnePublicEventsDtoLocationEnum = {
    Online: 'ONLINE',
    Undefined: 'UNDEFINED',
    Defined: 'DEFINED'
} as const;

export type FindOnePublicEventsDtoLocationEnum = typeof FindOnePublicEventsDtoLocationEnum[keyof typeof FindOnePublicEventsDtoLocationEnum];

/**
 * 
 * @export
 * @interface FindOnePublicEventsDtoConfig
 */
export interface FindOnePublicEventsDtoConfig {
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoConfig
     */
    'credentialType': FindOnePublicEventsDtoConfigCredentialTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof FindOnePublicEventsDtoConfig
     */
    'participantNetworks': boolean;
}

export const FindOnePublicEventsDtoConfigCredentialTypeEnum = {
    Void: 'VOID',
    Qrcode: 'QRCODE',
    FacialInSite: 'FACIAL_IN_SITE',
    Facial: 'FACIAL'
} as const;

export type FindOnePublicEventsDtoConfigCredentialTypeEnum = typeof FindOnePublicEventsDtoConfigCredentialTypeEnum[keyof typeof FindOnePublicEventsDtoConfigCredentialTypeEnum];

/**
 * 
 * @export
 * @interface FindOnePublicEventsDtoTerm
 */
export interface FindOnePublicEventsDtoTerm {
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTerm
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTerm
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTerm
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface FindOnePublicEventsDtoTicketInner
 */
export interface FindOnePublicEventsDtoTicketInner {
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'batch': number;
    /**
     * 
     * @type {number}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'avaible': number;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'ticketName': string;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'currency': string;
    /**
     * 
     * @type {Array<FindOnePublicEventsDtoTicketInnerTicketDaysInner>}
     * @memberof FindOnePublicEventsDtoTicketInner
     */
    'ticketDays': Array<FindOnePublicEventsDtoTicketInnerTicketDaysInner>;
}
/**
 * 
 * @export
 * @interface FindOnePublicEventsDtoTicketInnerTicketDaysInner
 */
export interface FindOnePublicEventsDtoTicketInnerTicketDaysInner {
    /**
     * 
     * @type {number}
     * @memberof FindOnePublicEventsDtoTicketInnerTicketDaysInner
     */
    'id': number;
    /**
     * 
     * @type {any}
     * @memberof FindOnePublicEventsDtoTicketInnerTicketDaysInner
     */
    'day': any;
}
/**
 * 
 * @export
 * @interface FindTicketByLinkResponseDto
 */
export interface FindTicketByLinkResponseDto {
    /**
     * 
     * @type {string}
     * @memberof FindTicketByLinkResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FindTicketByLinkResponseDto
     */
    'ticketName': string;
    /**
     * 
     * @type {string}
     * @memberof FindTicketByLinkResponseDto
     */
    'description': string;
    /**
     * 
     * @type {Array<FindTicketByLinkResponseDtoTicketDaysInner>}
     * @memberof FindTicketByLinkResponseDto
     */
    'ticketDays': Array<FindTicketByLinkResponseDtoTicketDaysInner>;
}
/**
 * 
 * @export
 * @interface FindTicketByLinkResponseDtoTicketDaysInner
 */
export interface FindTicketByLinkResponseDtoTicketDaysInner {
    /**
     * 
     * @type {number}
     * @memberof FindTicketByLinkResponseDtoTicketDaysInner
     */
    'id': number;
    /**
     * 
     * @type {any}
     * @memberof FindTicketByLinkResponseDtoTicketDaysInner
     */
    'date': any;
}
/**
 * 
 * @export
 * @interface GeneralDashboardResponseDto
 */
export interface GeneralDashboardResponseDto {
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalEvents': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalTickets': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalParticipants': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalBrute': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalLiquid': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'totalDrawee': number;
    /**
     * 
     * @type {Array<GeneralDashboardResponseDtoBestEventsInner>}
     * @memberof GeneralDashboardResponseDto
     */
    'bestEvents': Array<GeneralDashboardResponseDtoBestEventsInner>;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'participantsCheckIn': number;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDto
     */
    'participantsNotCheckedIn': number;
}
/**
 * 
 * @export
 * @interface GeneralDashboardResponseDtoBestEventsInner
 */
export interface GeneralDashboardResponseDtoBestEventsInner {
    /**
     * 
     * @type {string}
     * @memberof GeneralDashboardResponseDtoBestEventsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GeneralDashboardResponseDtoBestEventsInner
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof GeneralDashboardResponseDtoBestEventsInner
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface GetEventConfigDto
 */
export interface GetEventConfigDto {
    /**
     * 
     * @type {number}
     * @memberof GetEventConfigDto
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof GetEventConfigDto
     */
    'printAutomatic': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetEventConfigDto
     */
    'credentialType': GetEventConfigDtoCredentialTypeEnum;
}

export const GetEventConfigDtoCredentialTypeEnum = {
    Void: 'VOID',
    Qrcode: 'QRCODE',
    FacialInSite: 'FACIAL_IN_SITE',
    Facial: 'FACIAL'
} as const;

export type GetEventConfigDtoCredentialTypeEnum = typeof GetEventConfigDtoCredentialTypeEnum[keyof typeof GetEventConfigDtoCredentialTypeEnum];

/**
 * 
 * @export
 * @interface GetEventsPrintAutomatic
 */
export interface GetEventsPrintAutomatic {
    /**
     * 
     * @type {Array<GetEventsPrintAutomaticDtoInner>}
     * @memberof GetEventsPrintAutomatic
     */
    'data': Array<GetEventsPrintAutomaticDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof GetEventsPrintAutomatic
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface GetEventsPrintAutomaticDtoInner
 */
export interface GetEventsPrintAutomaticDtoInner {
    /**
     * 
     * @type {string}
     * @memberof GetEventsPrintAutomaticDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsPrintAutomaticDtoInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsPrintAutomaticDtoInner
     */
    'photo': string;
    /**
     * 
     * @type {string}
     * @memberof GetEventsPrintAutomaticDtoInner
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface LastAccreditedParticipantsDtoInner
 */
export interface LastAccreditedParticipantsDtoInner {
    /**
     * 
     * @type {number}
     * @memberof LastAccreditedParticipantsDtoInner
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LastAccreditedParticipantsDtoInner
     */
    'ticketName': string;
    /**
     * 
     * @type {string}
     * @memberof LastAccreditedParticipantsDtoInner
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof LastAccreditedParticipantsDtoInner
     */
    'status': LastAccreditedParticipantsDtoInnerStatusEnum;
    /**
     * 
     * @type {any}
     * @memberof LastAccreditedParticipantsDtoInner
     */
    'createdAt': any;
}

export const LastAccreditedParticipantsDtoInnerStatusEnum = {
    CheckInEarly: 'CHECK_IN_EARLY',
    CheckIn: 'CHECK_IN',
    CheckOut: 'CHECK_OUT',
    Canceled: 'CANCELED',
    Enable: 'ENABLE'
} as const;

export type LastAccreditedParticipantsDtoInnerStatusEnum = typeof LastAccreditedParticipantsDtoInnerStatusEnum[keyof typeof LastAccreditedParticipantsDtoInnerStatusEnum];

/**
 * 
 * @export
 * @interface LastAccreditedParticipantsResponse
 */
export interface LastAccreditedParticipantsResponse {
    /**
     * 
     * @type {Array<LastAccreditedParticipantsDtoInner>}
     * @memberof LastAccreditedParticipantsResponse
     */
    'data': Array<LastAccreditedParticipantsDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof LastAccreditedParticipantsResponse
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface ListTickets
 */
export interface ListTickets {
    /**
     * 
     * @type {Array<ListTicketsDtoInner>}
     * @memberof ListTickets
     */
    'data': Array<ListTicketsDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListTickets
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface ListTicketsDtoInner
 */
export interface ListTicketsDtoInner {
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventPhoto': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventTitle': string;
    /**
     * 
     * @type {any}
     * @memberof ListTicketsDtoInner
     */
    'eventStartAt': any;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventLocation': ListTicketsDtoInnerEventLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventLatitude': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'eventLongitude': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'complement': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof ListTicketsDtoInner
     */
    'district': string;
}

export const ListTicketsDtoInnerEventLocationEnum = {
    Online: 'ONLINE',
    Undefined: 'UNDEFINED',
    Defined: 'DEFINED'
} as const;

export type ListTicketsDtoInnerEventLocationEnum = typeof ListTicketsDtoInnerEventLocationEnum[keyof typeof ListTicketsDtoInnerEventLocationEnum];

/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseDto
     */
    'userType': LoginResponseDtoUserTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDto
     */
    'haveTickets': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseDto
     */
    'haveEvents': boolean;
}

export const LoginResponseDtoUserTypeEnum = {
    Participant: 'PARTICIPANT',
    Producer: 'PRODUCER'
} as const;

export type LoginResponseDtoUserTypeEnum = typeof LoginResponseDtoUserTypeEnum[keyof typeof LoginResponseDtoUserTypeEnum];

/**
 * 
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'totalItems': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'remainingPages': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'nextPage': number | null;
    /**
     * 
     * @type {number}
     * @memberof PaginationResponse
     */
    'prevPage': number | null;
}
/**
 * 
 * @export
 * @interface ParticipantSocialNetworDto
 */
export interface ParticipantSocialNetworDto {
    /**
     * 
     * @type {number}
     * @memberof ParticipantSocialNetworDto
     */
    'id': number;
    /**
     * User network type
     * @type {string}
     * @memberof ParticipantSocialNetworDto
     */
    'network': ParticipantSocialNetworDtoNetworkEnum;
    /**
     * User network name
     * @type {string}
     * @memberof ParticipantSocialNetworDto
     */
    'username': string;
}

export const ParticipantSocialNetworDtoNetworkEnum = {
    Instagram: 'INSTAGRAM',
    Facebook: 'FACEBOOK',
    Linkedin: 'LINKEDIN',
    Snapchat: 'SNAPCHAT',
    Twitter: 'TWITTER',
    Threads: 'THREADS',
    Tiktok: 'TIKTOK',
    Github: 'GITHUB'
} as const;

export type ParticipantSocialNetworDtoNetworkEnum = typeof ParticipantSocialNetworDtoNetworkEnum[keyof typeof ParticipantSocialNetworDtoNetworkEnum];

/**
 * 
 * @export
 * @interface ParticipantSocialNetworks
 */
export interface ParticipantSocialNetworks {
    /**
     * 
     * @type {Array<ParticipantSocialNetworDto>}
     * @memberof ParticipantSocialNetworks
     */
    'data': Array<ParticipantSocialNetworDto>;
}
/**
 * 
 * @export
 * @interface ParticipantTicketDto
 */
export interface ParticipantTicketDto {
    /**
     * 
     * @type {string}
     * @memberof ParticipantTicketDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ParticipantTicketDto
     */
    'ticketName': string;
    /**
     * 
     * @type {number}
     * @memberof ParticipantTicketDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof ParticipantTicketDto
     */
    'eventName': string;
    /**
     * 
     * @type {string}
     * @memberof ParticipantTicketDto
     */
    'qrcode': string;
    /**
     * 
     * @type {any}
     * @memberof ParticipantTicketDto
     */
    'startAt': any;
}
/**
 * 
 * @export
 * @interface QuizCreateResponseDto
 */
export interface QuizCreateResponseDto {
    /**
     * 
     * @type {string}
     * @memberof QuizCreateResponseDto
     */
    'ok': string;
}
/**
 * 
 * @export
 * @interface QuizDto
 */
export interface QuizDto {
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'quizId': string;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'title': string;
    /**
     * 
     * @type {any}
     * @memberof QuizDto
     */
    'startAt': any;
    /**
     * 
     * @type {any}
     * @memberof QuizDto
     */
    'endAt': any;
    /**
     * 
     * @type {string}
     * @memberof QuizDto
     */
    'status': QuizDtoStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof QuizDto
     */
    'anonimousResponse': boolean;
    /**
     * 
     * @type {Array<QuizDtoQuestionsInner>}
     * @memberof QuizDto
     */
    'questions': Array<QuizDtoQuestionsInner>;
}

export const QuizDtoStatusEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
} as const;

export type QuizDtoStatusEnum = typeof QuizDtoStatusEnum[keyof typeof QuizDtoStatusEnum];

/**
 * 
 * @export
 * @interface QuizDtoQuestionsInner
 */
export interface QuizDtoQuestionsInner {
    /**
     * 
     * @type {string}
     * @memberof QuizDtoQuestionsInner
     */
    'questionId': string;
    /**
     * 
     * @type {string}
     * @memberof QuizDtoQuestionsInner
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof QuizDtoQuestionsInner
     */
    'sequential': number;
    /**
     * 
     * @type {string}
     * @memberof QuizDtoQuestionsInner
     */
    'questionType': QuizDtoQuestionsInnerQuestionTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof QuizDtoQuestionsInner
     */
    'isMandatory': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuizDtoQuestionsInner
     */
    'multipleChoice': boolean;
    /**
     * 
     * @type {Array<QuizDtoQuestionsInnerOptionsInner>}
     * @memberof QuizDtoQuestionsInner
     */
    'options'?: Array<QuizDtoQuestionsInnerOptionsInner>;
}

export const QuizDtoQuestionsInnerQuestionTypeEnum = {
    MultipleChoice: 'MULTIPLE_CHOICE',
    Rating: 'RATING',
    Descriptive: 'DESCRIPTIVE'
} as const;

export type QuizDtoQuestionsInnerQuestionTypeEnum = typeof QuizDtoQuestionsInnerQuestionTypeEnum[keyof typeof QuizDtoQuestionsInnerQuestionTypeEnum];

/**
 * 
 * @export
 * @interface QuizDtoQuestionsInnerOptionsInner
 */
export interface QuizDtoQuestionsInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof QuizDtoQuestionsInnerOptionsInner
     */
    'optionId': string;
    /**
     * 
     * @type {number}
     * @memberof QuizDtoQuestionsInnerOptionsInner
     */
    'sequential': number;
    /**
     * 
     * @type {string}
     * @memberof QuizDtoQuestionsInnerOptionsInner
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof QuizDtoQuestionsInnerOptionsInner
     */
    'isOther': boolean;
}
/**
 * 
 * @export
 * @interface ResponseEventParticipants
 */
export interface ResponseEventParticipants {
    /**
     * 
     * @type {Array<EventParticipantsResponseDtoInner>}
     * @memberof ResponseEventParticipants
     */
    'data': Array<EventParticipantsResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ResponseEventParticipants
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface ResponseSponsorUserDto
 */
export interface ResponseSponsorUserDto {
    /**
     * 
     * @type {string}
     * @memberof ResponseSponsorUserDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseSponsorUserDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseSponsorUserDto
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseSponsorUserDto
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface ResponseStaffEvents
 */
export interface ResponseStaffEvents {
    /**
     * 
     * @type {Array<EventStaffAllResponseDtoInner>}
     * @memberof ResponseStaffEvents
     */
    'data': Array<EventStaffAllResponseDtoInner>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ResponseStaffEvents
     */
    'pageInfo': PaginationResponse | null;
}
/**
 * 
 * @export
 * @interface ThanksScreenDto
 */
export interface ThanksScreenDto {
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventCity': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'evenState': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventPhoto': string;
    /**
     * 
     * @type {any}
     * @memberof ThanksScreenDto
     */
    'eventStartAt'?: any | null;
    /**
     * 
     * @type {any}
     * @memberof ThanksScreenDto
     */
    'eventEndAt'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventParticipantTicketTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventParticipantName': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventParticipantQrcode': string;
    /**
     * 
     * @type {string}
     * @memberof ThanksScreenDto
     */
    'eventParticipantDocument': string;
}
/**
 * 
 * @export
 * @interface UpdateSponsorUserDto
 */
export interface UpdateSponsorUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateSponsorUserDto
     */
    'publicKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateSponsorUserDto
     */
    'secretKey'?: string | null;
}
/**
 * 
 * @export
 * @interface UserIsParticipantInEventByLinkIdResponseDto
 */
export interface UserIsParticipantInEventByLinkIdResponseDto {
    /**
     * 
     * @type {boolean}
     * @memberof UserIsParticipantInEventByLinkIdResponseDto
     */
    'isParticipant': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserIsParticipantInEventByLinkIdResponseDto
     */
    'participantId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserIsParticipantInEventByLinkIdResponseDto
     */
    'haveFacial': boolean;
}
/**
 * 
 * @export
 * @interface UserProducerCreateDto
 */
export interface UserProducerCreateDto {
    /**
     * User email
     * @type {string}
     * @memberof UserProducerCreateDto
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof UserProducerCreateDto
     */
    'password': string;
    /**
     * User confirm password
     * @type {string}
     * @memberof UserProducerCreateDto
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface UserProducerFinishSignUpDto
 */
export interface UserProducerFinishSignUpDto {
    /**
     * User name
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'name'?: string;
    /**
     * User birth date
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'dateBirth'?: string;
    /**
     * User document
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'document'?: string;
    /**
     * User phone country
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'phoneCountry'?: string;
    /**
     * User phone number
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'phoneNumber'?: string;
    /**
     * User street
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'street'?: string;
    /**
     * User district
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'district'?: string;
    /**
     * User state
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'state'?: string;
    /**
     * User city
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'city'?: string;
    /**
     * User country
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'country'?: string;
    /**
     * User number
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'number'?: string;
    /**
     * User complement
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'complement'?: string;
    /**
     * User cep
     * @type {string}
     * @memberof UserProducerFinishSignUpDto
     */
    'cep'?: string;
}
/**
 * 
 * @export
 * @interface UserProducerResponseDto
 */
export interface UserProducerResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'dateBirth': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'document': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'phoneCountry': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'profilePhoto': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'street': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'district': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'complement': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDto
     */
    'cep': string;
    /**
     * 
     * @type {any}
     * @memberof UserProducerResponseDto
     */
    'createdAt': any;
    /**
     * 
     * @type {Array<UserProducerResponseDtoEventsInner>}
     * @memberof UserProducerResponseDto
     */
    'events': Array<UserProducerResponseDtoEventsInner>;
}
/**
 * 
 * @export
 * @interface UserProducerResponseDtoEventsInner
 */
export interface UserProducerResponseDtoEventsInner {
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDtoEventsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserProducerResponseDtoEventsInner
     */
    'title': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find an file especific
         * @param {string} key File source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerFile: async (key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('authControllerFile', 'key', key)
            const localVarPath = `/api/auth/v1/storage/file/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {AuthLoginDto} authLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (authLoginDto: AuthLoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLoginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'authLoginDto', authLoginDto)
            const localVarPath = `/api/auth/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login user with facial
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginWithFacial: async (email: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authControllerLoginWithFacial', 'email', email)
            const localVarPath = `/api/auth/v1/auth/login-with-facial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMoloniTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/moloni-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/webhook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate user with facial
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateWithFacial: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/v1/auth/validate-facial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Find an file especific
         * @param {string} key File source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerFile(key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerFile(key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {AuthLoginDto} authLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(authLoginDto: AuthLoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(authLoginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login user with facial
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLoginWithFacial(email: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLoginWithFacial(email, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLoginWithFacial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerMoloniTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerMoloniTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerMoloniTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate user with facial
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerValidateWithFacial(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerValidateWithFacial(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerValidateWithFacial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Find an file especific
         * @param {string} key File source
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerFile(key: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.authControllerFile(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {AuthLoginDto} authLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(authLoginDto: AuthLoginDto, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerLogin(authLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login user with facial
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginWithFacial(email: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerLoginWithFacial(email, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMoloniTest(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerMoloniTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerTest(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate user with facial
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerValidateWithFacial(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerValidateWithFacial(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Find an file especific
     * @param {string} key File source
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerFile(key: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerFile(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {AuthLoginDto} authLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(authLoginDto: AuthLoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(authLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login user with facial
     * @param {string} email 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLoginWithFacial(email: string, file?: File, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLoginWithFacial(email, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerMoloniTest(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerMoloniTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerTest(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate user with facial
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerValidateWithFacial(file?: File, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerValidateWithFacial(file, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventParticipantApi - axios parameter creator
 * @export
 */
export const EventParticipantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {string} linkId Link id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCheckTicketIsAvaible: async (slug: string, linkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventParticipantControllerCheckTicketIsAvaible', 'slug', slug)
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('eventParticipantControllerCheckTicketIsAvaible', 'linkId', linkId)
            const localVarPath = `/api/event-participant/v1/event-participant/{slug}/{linkId}/verify-is-avaible`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"linkId"}}`, encodeURIComponent(String(linkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateNetwork: async (qrcode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qrcode' is not null or undefined
            assertParamExists('eventParticipantControllerCreateNetwork', 'qrcode', qrcode)
            const localVarPath = `/api/event-participant/v1/event-participant/create-network`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (qrcode !== undefined) {
                localVarQueryParameter['qrcode'] = qrcode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event
         * @param {string} userEmail 
         * @param {boolean} updateUser 
         * @param {string} eventTicketLinkId 
         * @param {EventParticipantCreateDto} eventParticipantCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipant: async (userEmail: string, updateUser: boolean, eventTicketLinkId: string, eventParticipantCreateDto: EventParticipantCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipant', 'userEmail', userEmail)
            // verify required parameter 'updateUser' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipant', 'updateUser', updateUser)
            // verify required parameter 'eventTicketLinkId' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipant', 'eventTicketLinkId', eventTicketLinkId)
            // verify required parameter 'eventParticipantCreateDto' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipant', 'eventParticipantCreateDto', eventParticipantCreateDto)
            const localVarPath = `/api/event-participant/v1/event-participant/{eventTicketLinkId}/create-participant`
                .replace(`{${"eventTicketLinkId"}}`, encodeURIComponent(String(eventTicketLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }

            if (updateUser !== undefined) {
                localVarQueryParameter['updateUser'] = updateUser;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventParticipantCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event participant facial
         * @param {string} participantId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipantFacial: async (participantId: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipantFacial', 'participantId', participantId)
            const localVarPath = `/api/event-participant/v1/event-participant/{participantId}/create-participant-facial`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event participant network
         * @param {string} participantId 
         * @param {Array<EventParticipantCreateDtoNetworksInner>} eventParticipantCreateDtoNetworksInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipantNetworks: async (participantId: string, eventParticipantCreateDtoNetworksInner: Array<EventParticipantCreateDtoNetworksInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipantNetworks', 'participantId', participantId)
            // verify required parameter 'eventParticipantCreateDtoNetworksInner' is not null or undefined
            assertParamExists('eventParticipantControllerCreateParticipantNetworks', 'eventParticipantCreateDtoNetworksInner', eventParticipantCreateDtoNetworksInner)
            const localVarPath = `/api/event-participant/v1/event-participant/{participantId}/create-participant-network`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventParticipantCreateDtoNetworksInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {CreateParticipantQuizDto} createParticipantQuizDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateQuizResponses: async (quizId: string, userEmail: string, createParticipantQuizDto: CreateParticipantQuizDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventParticipantControllerCreateQuizResponses', 'quizId', quizId)
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists('eventParticipantControllerCreateQuizResponses', 'userEmail', userEmail)
            // verify required parameter 'createParticipantQuizDto' is not null or undefined
            assertParamExists('eventParticipantControllerCreateQuizResponses', 'createParticipantQuizDto', createParticipantQuizDto)
            const localVarPath = `/api/event-participant/v1/event-participant/{quizId}/response-quiz`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParticipantQuizDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary increment view count
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventAddViewCount: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventParticipantControllerEventAddViewCount', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-participant/v1/event-participant/{eventSlug}/increment-view-count`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventTicketInfo: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventParticipantControllerEventTicketInfo', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-participant/v1/event-participant/{eventSlug}/event-ticket-info`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} updateUser 
         * @param {EventTicketSellDto} eventTicketSellDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventTicketSell: async (updateUser: boolean, eventTicketSellDto: EventTicketSellDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUser' is not null or undefined
            assertParamExists('eventParticipantControllerEventTicketSell', 'updateUser', updateUser)
            // verify required parameter 'eventTicketSellDto' is not null or undefined
            assertParamExists('eventParticipantControllerEventTicketSell', 'eventTicketSellDto', eventTicketSellDto)
            const localVarPath = `/api/event-participant/v1/event-participant/event-ticket-buy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (updateUser !== undefined) {
                localVarQueryParameter['updateUser'] = updateUser;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventTicketSellDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all events public
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {string} [category] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindAllPublicEvents: async (page: string, perPage: string, title?: string, category?: string, initialDate?: string, finalDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventParticipantControllerFindAllPublicEvents', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventParticipantControllerFindAllPublicEvents', 'perPage', perPage)
            const localVarPath = `/api/event-participant/v1/event-participant/find-all-events-public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (initialDate !== undefined) {
                localVarQueryParameter['initialDate'] = initialDate;
            }

            if (finalDate !== undefined) {
                localVarQueryParameter['finalDate'] = finalDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindAllPublicEventsHome: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-participant/v1/event-participant/get-events-home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event information
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindByEmail: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('eventParticipantControllerFindByEmail', 'email', email)
            const localVarPath = `/api/event-participant/v1/event-participant/{email}/find-user-by-email`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindEventInfo: async (eventTicketLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTicketLinkId' is not null or undefined
            assertParamExists('eventParticipantControllerFindEventInfo', 'eventTicketLinkId', eventTicketLinkId)
            const localVarPath = `/api/event-participant/v1/event-participant/{eventTicketLinkId}/event-info`
                .replace(`{${"eventTicketLinkId"}}`, encodeURIComponent(String(eventTicketLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindOnePublicEvent: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventParticipantControllerFindOnePublicEvent', 'slug', slug)
            const localVarPath = `/api/event-participant/v1/event-participant/{slug}/find-one-event-public`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get social networks of event participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetAllParticipantNetworks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-participant/v1/event-participant/get-social-networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetEventsMoreView: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-participant/v1/event-participant/get-events-more-views`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetQuiz: async (quizId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventParticipantControllerGetQuiz', 'quizId', quizId)
            const localVarPath = `/api/event-participant/v1/event-participant/{quizId}/get-quiz`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetTicketInfoByLink: async (eventTicketLinkId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTicketLinkId' is not null or undefined
            assertParamExists('eventParticipantControllerGetTicketInfoByLink', 'eventTicketLinkId', eventTicketLinkId)
            const localVarPath = `/api/event-participant/v1/event-participant/{eventTicketLinkId}/get-info`
                .replace(`{${"eventTicketLinkId"}}`, encodeURIComponent(String(eventTicketLinkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event information
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [searchable] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerListTickets: async (page: string, perPage: string, searchable?: string, initialDate?: string, finalDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventParticipantControllerListTickets', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventParticipantControllerListTickets', 'perPage', perPage)
            const localVarPath = `/api/event-participant/v1/event-participant/list-tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (searchable !== undefined) {
                localVarQueryParameter['searchable'] = searchable;
            }

            if (initialDate !== undefined) {
                localVarQueryParameter['initialDate'] = initialDate;
            }

            if (finalDate !== undefined) {
                localVarQueryParameter['finalDate'] = finalDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerNetworkHistoric: async (page: string, perPage: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventParticipantControllerNetworkHistoric', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventParticipantControllerNetworkHistoric', 'perPage', perPage)
            const localVarPath = `/api/event-participant/v1/event-participant/network-historic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerNetworkParticipant: async (qrcode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qrcode' is not null or undefined
            assertParamExists('eventParticipantControllerNetworkParticipant', 'qrcode', qrcode)
            const localVarPath = `/api/event-participant/v1/event-participant/network/{qrcode}`
                .replace(`{${"qrcode"}}`, encodeURIComponent(String(qrcode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event participant ticket
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerParticipantTicket: async (participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventParticipantControllerParticipantTicket', 'participantId', participantId)
            const localVarPath = `/api/event-participant/v1/event-participant/{participantId}/ticket`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} partId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerThanksScreen: async (partId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partId' is not null or undefined
            assertParamExists('eventParticipantControllerThanksScreen', 'partId', partId)
            const localVarPath = `/api/event-participant/v1/event-participant/{partId}/thanks-screen`
                .replace(`{${"partId"}}`, encodeURIComponent(String(partId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} linkId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerUserIsParticipantInEventByLinkId: async (linkId: string, userEmail: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'linkId' is not null or undefined
            assertParamExists('eventParticipantControllerUserIsParticipantInEventByLinkId', 'linkId', linkId)
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists('eventParticipantControllerUserIsParticipantInEventByLinkId', 'userEmail', userEmail)
            const localVarPath = `/api/event-participant/v1/event-participant/{linkId}/is-participant-by-link-id`
                .replace(`{${"linkId"}}`, encodeURIComponent(String(linkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerUserIsParticipantInEventByQuizId: async (quizId: string, userEmail: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventParticipantControllerUserIsParticipantInEventByQuizId', 'quizId', quizId)
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists('eventParticipantControllerUserIsParticipantInEventByQuizId', 'userEmail', userEmail)
            const localVarPath = `/api/event-participant/v1/event-participant/{quizId}/is-participant-by-quiz-id`
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userEmail !== undefined) {
                localVarQueryParameter['userEmail'] = userEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventParticipantApi - functional programming interface
 * @export
 */
export const EventParticipantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventParticipantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {string} linkId Link id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCheckTicketIsAvaible(slug: string, linkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCheckTicketIsAvaible(slug, linkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCheckTicketIsAvaible']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCreateNetwork(qrcode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCreateNetwork(qrcode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCreateNetwork']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event
         * @param {string} userEmail 
         * @param {boolean} updateUser 
         * @param {string} eventTicketLinkId 
         * @param {EventParticipantCreateDto} eventParticipantCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCreateParticipant(userEmail: string, updateUser: boolean, eventTicketLinkId: string, eventParticipantCreateDto: EventParticipantCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCreateParticipant(userEmail, updateUser, eventTicketLinkId, eventParticipantCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCreateParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event participant facial
         * @param {string} participantId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCreateParticipantFacial(participantId: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCreateParticipantFacial(participantId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCreateParticipantFacial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event participant network
         * @param {string} participantId 
         * @param {Array<EventParticipantCreateDtoNetworksInner>} eventParticipantCreateDtoNetworksInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCreateParticipantNetworks(participantId: string, eventParticipantCreateDtoNetworksInner: Array<EventParticipantCreateDtoNetworksInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCreateParticipantNetworks(participantId, eventParticipantCreateDtoNetworksInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCreateParticipantNetworks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {CreateParticipantQuizDto} createParticipantQuizDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerCreateQuizResponses(quizId: string, userEmail: string, createParticipantQuizDto: CreateParticipantQuizDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerCreateQuizResponses(quizId, userEmail, createParticipantQuizDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerCreateQuizResponses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary increment view count
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerEventAddViewCount(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerEventAddViewCount(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerEventAddViewCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerEventTicketInfo(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerEventTicketInfo(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerEventTicketInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} updateUser 
         * @param {EventTicketSellDto} eventTicketSellDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerEventTicketSell(updateUser: boolean, eventTicketSellDto: EventTicketSellDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerEventTicketSell(updateUser, eventTicketSellDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerEventTicketSell']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all events public
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {string} [category] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerFindAllPublicEvents(page: string, perPage: string, title?: string, category?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllPublicEvents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerFindAllPublicEvents(page, perPage, title, category, initialDate, finalDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerFindAllPublicEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerFindAllPublicEventsHome(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FindAllPublicEventsDtoInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerFindAllPublicEventsHome(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerFindAllPublicEventsHome']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event information
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerFindByEmail(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindByEmailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerFindByEmail(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerFindByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerFindEventInfo(eventTicketLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindEventInfoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerFindEventInfo(eventTicketLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerFindEventInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerFindOnePublicEvent(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOnePublicEventsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerFindOnePublicEvent(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerFindOnePublicEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get social networks of event participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerGetAllParticipantNetworks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantSocialNetworks>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerGetAllParticipantNetworks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerGetAllParticipantNetworks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerGetEventsMoreView(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FindAllPublicEventsDtoInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerGetEventsMoreView(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerGetEventsMoreView']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerGetQuiz(quizId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuizDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerGetQuiz(quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerGetQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTicketByLinkResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerGetTicketInfoByLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event information
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [searchable] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerListTickets(page: string, perPage: string, searchable?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTickets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerListTickets(page, perPage, searchable, initialDate, finalDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerListTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerNetworkHistoric(page: string, perPage: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerNetworkHistoric(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerNetworkHistoric']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerNetworkParticipant(qrcode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerNetworkParticipant(qrcode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerNetworkParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event participant ticket
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerParticipantTicket(participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantTicketDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerParticipantTicket(participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerParticipantTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} partId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerThanksScreen(partId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThanksScreenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerThanksScreen(partId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerThanksScreen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} linkId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerUserIsParticipantInEventByLinkId(linkId: string, userEmail: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserIsParticipantInEventByLinkIdResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerUserIsParticipantInEventByLinkId(linkId, userEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerUserIsParticipantInEventByLinkId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventParticipantControllerUserIsParticipantInEventByQuizId(quizId: string, userEmail: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventParticipantControllerUserIsParticipantInEventByQuizId(quizId, userEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventParticipantApi.eventParticipantControllerUserIsParticipantInEventByQuizId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventParticipantApi - factory interface
 * @export
 */
export const EventParticipantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventParticipantApiFp(configuration)
    return {
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {string} linkId Link id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCheckTicketIsAvaible(slug: string, linkId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.eventParticipantControllerCheckTicketIsAvaible(slug, linkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateNetwork(qrcode: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventParticipantControllerCreateNetwork(qrcode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event
         * @param {string} userEmail 
         * @param {boolean} updateUser 
         * @param {string} eventTicketLinkId 
         * @param {EventParticipantCreateDto} eventParticipantCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipant(userEmail: string, updateUser: boolean, eventTicketLinkId: string, eventParticipantCreateDto: EventParticipantCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventParticipantControllerCreateParticipant(userEmail, updateUser, eventTicketLinkId, eventParticipantCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event participant facial
         * @param {string} participantId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipantFacial(participantId: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventParticipantControllerCreateParticipantFacial(participantId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event participant network
         * @param {string} participantId 
         * @param {Array<EventParticipantCreateDtoNetworksInner>} eventParticipantCreateDtoNetworksInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateParticipantNetworks(participantId: string, eventParticipantCreateDtoNetworksInner: Array<EventParticipantCreateDtoNetworksInner>, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventParticipantControllerCreateParticipantNetworks(participantId, eventParticipantCreateDtoNetworksInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {CreateParticipantQuizDto} createParticipantQuizDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerCreateQuizResponses(quizId: string, userEmail: string, createParticipantQuizDto: CreateParticipantQuizDto, options?: RawAxiosRequestConfig): AxiosPromise<QuizCreateResponseDto> {
            return localVarFp.eventParticipantControllerCreateQuizResponses(quizId, userEmail, createParticipantQuizDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary increment view count
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventAddViewCount(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventParticipantControllerEventAddViewCount(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventTicketInfo(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketInfoDto> {
            return localVarFp.eventParticipantControllerEventTicketInfo(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} updateUser 
         * @param {EventTicketSellDto} eventTicketSellDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerEventTicketSell(updateUser: boolean, eventTicketSellDto: EventTicketSellDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventParticipantControllerEventTicketSell(updateUser, eventTicketSellDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all events public
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [title] 
         * @param {string} [category] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindAllPublicEvents(page: string, perPage: string, title?: string, category?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<FindAllPublicEvents> {
            return localVarFp.eventParticipantControllerFindAllPublicEvents(page, perPage, title, category, initialDate, finalDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindAllPublicEventsHome(options?: RawAxiosRequestConfig): AxiosPromise<Array<FindAllPublicEventsDtoInner>> {
            return localVarFp.eventParticipantControllerFindAllPublicEventsHome(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event information
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindByEmail(email: string, options?: RawAxiosRequestConfig): AxiosPromise<FindByEmailDto> {
            return localVarFp.eventParticipantControllerFindByEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event information
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindEventInfo(eventTicketLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<FindEventInfoDto> {
            return localVarFp.eventParticipantControllerFindEventInfo(eventTicketLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerFindOnePublicEvent(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<FindOnePublicEventsDto> {
            return localVarFp.eventParticipantControllerFindOnePublicEvent(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get social networks of event participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetAllParticipantNetworks(options?: RawAxiosRequestConfig): AxiosPromise<ParticipantSocialNetworks> {
            return localVarFp.eventParticipantControllerGetAllParticipantNetworks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get Events More View
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetEventsMoreView(options?: RawAxiosRequestConfig): AxiosPromise<Array<FindAllPublicEventsDtoInner>> {
            return localVarFp.eventParticipantControllerGetEventsMoreView(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetQuiz(quizId: string, options?: RawAxiosRequestConfig): AxiosPromise<QuizDto> {
            return localVarFp.eventParticipantControllerGetQuiz(quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} eventTicketLinkId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId: string, options?: RawAxiosRequestConfig): AxiosPromise<FindTicketByLinkResponseDto> {
            return localVarFp.eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event information
         * @param {string} page 
         * @param {string} perPage 
         * @param {string} [searchable] 
         * @param {string} [initialDate] 
         * @param {string} [finalDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerListTickets(page: string, perPage: string, searchable?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListTickets> {
            return localVarFp.eventParticipantControllerListTickets(page, perPage, searchable, initialDate, finalDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} page 
         * @param {string} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerNetworkHistoric(page: string, perPage: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventParticipantControllerNetworkHistoric(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} qrcode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerNetworkParticipant(qrcode: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventParticipantControllerNetworkParticipant(qrcode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event participant ticket
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerParticipantTicket(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantTicketDto> {
            return localVarFp.eventParticipantControllerParticipantTicket(participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get one event public
         * @param {string} partId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerThanksScreen(partId: string, options?: RawAxiosRequestConfig): AxiosPromise<ThanksScreenDto> {
            return localVarFp.eventParticipantControllerThanksScreen(partId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} linkId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerUserIsParticipantInEventByLinkId(linkId: string, userEmail: string, options?: RawAxiosRequestConfig): AxiosPromise<UserIsParticipantInEventByLinkIdResponseDto> {
            return localVarFp.eventParticipantControllerUserIsParticipantInEventByLinkId(linkId, userEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz
         * @param {string} quizId 
         * @param {string} userEmail 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventParticipantControllerUserIsParticipantInEventByQuizId(quizId: string, userEmail: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.eventParticipantControllerUserIsParticipantInEventByQuizId(quizId, userEmail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventParticipantApi - object-oriented interface
 * @export
 * @class EventParticipantApi
 * @extends {BaseAPI}
 */
export class EventParticipantApi extends BaseAPI {
    /**
     * 
     * @summary Get one event public
     * @param {string} slug Event slug
     * @param {string} linkId Link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCheckTicketIsAvaible(slug: string, linkId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCheckTicketIsAvaible(slug, linkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} qrcode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCreateNetwork(qrcode: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCreateNetwork(qrcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event
     * @param {string} userEmail 
     * @param {boolean} updateUser 
     * @param {string} eventTicketLinkId 
     * @param {EventParticipantCreateDto} eventParticipantCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCreateParticipant(userEmail: string, updateUser: boolean, eventTicketLinkId: string, eventParticipantCreateDto: EventParticipantCreateDto, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCreateParticipant(userEmail, updateUser, eventTicketLinkId, eventParticipantCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event participant facial
     * @param {string} participantId 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCreateParticipantFacial(participantId: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCreateParticipantFacial(participantId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event participant network
     * @param {string} participantId 
     * @param {Array<EventParticipantCreateDtoNetworksInner>} eventParticipantCreateDtoNetworksInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCreateParticipantNetworks(participantId: string, eventParticipantCreateDtoNetworksInner: Array<EventParticipantCreateDtoNetworksInner>, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCreateParticipantNetworks(participantId, eventParticipantCreateDtoNetworksInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz
     * @param {string} quizId 
     * @param {string} userEmail 
     * @param {CreateParticipantQuizDto} createParticipantQuizDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerCreateQuizResponses(quizId: string, userEmail: string, createParticipantQuizDto: CreateParticipantQuizDto, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerCreateQuizResponses(quizId, userEmail, createParticipantQuizDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary increment view count
     * @param {string} eventSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerEventAddViewCount(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerEventAddViewCount(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event information
     * @param {string} eventSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerEventTicketInfo(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerEventTicketInfo(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} updateUser 
     * @param {EventTicketSellDto} eventTicketSellDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerEventTicketSell(updateUser: boolean, eventTicketSellDto: EventTicketSellDto, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerEventTicketSell(updateUser, eventTicketSellDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all events public
     * @param {string} page 
     * @param {string} perPage 
     * @param {string} [title] 
     * @param {string} [category] 
     * @param {string} [initialDate] 
     * @param {string} [finalDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerFindAllPublicEvents(page: string, perPage: string, title?: string, category?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerFindAllPublicEvents(page, perPage, title, category, initialDate, finalDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get Events More View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerFindAllPublicEventsHome(options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerFindAllPublicEventsHome(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event information
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerFindByEmail(email: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerFindByEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event information
     * @param {string} eventTicketLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerFindEventInfo(eventTicketLinkId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerFindEventInfo(eventTicketLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one event public
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerFindOnePublicEvent(slug: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerFindOnePublicEvent(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get social networks of event participant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerGetAllParticipantNetworks(options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerGetAllParticipantNetworks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get Events More View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerGetEventsMoreView(options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerGetEventsMoreView(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz
     * @param {string} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerGetQuiz(quizId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerGetQuiz(quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one event public
     * @param {string} eventTicketLinkId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerGetTicketInfoByLink(eventTicketLinkId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event information
     * @param {string} page 
     * @param {string} perPage 
     * @param {string} [searchable] 
     * @param {string} [initialDate] 
     * @param {string} [finalDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerListTickets(page: string, perPage: string, searchable?: string, initialDate?: string, finalDate?: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerListTickets(page, perPage, searchable, initialDate, finalDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} page 
     * @param {string} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerNetworkHistoric(page: string, perPage: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerNetworkHistoric(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} qrcode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerNetworkParticipant(qrcode: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerNetworkParticipant(qrcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event participant ticket
     * @param {string} participantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerParticipantTicket(participantId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerParticipantTicket(participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get one event public
     * @param {string} partId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerThanksScreen(partId: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerThanksScreen(partId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz
     * @param {string} linkId 
     * @param {string} userEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerUserIsParticipantInEventByLinkId(linkId: string, userEmail: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerUserIsParticipantInEventByLinkId(linkId, userEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz
     * @param {string} quizId 
     * @param {string} userEmail 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventParticipantApi
     */
    public eventParticipantControllerUserIsParticipantInEventByQuizId(quizId: string, userEmail: string, options?: RawAxiosRequestConfig) {
        return EventParticipantApiFp(this.configuration).eventParticipantControllerUserIsParticipantInEventByQuizId(quizId, userEmail, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventProducerApi - axios parameter creator
 * @export
 */
export const EventProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create event
         * @param {EventCreateDto} eventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEvent: async (eventCreateDto: EventCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventCreateDto' is not null or undefined
            assertParamExists('eventProducerControllerCreateEvent', 'eventCreateDto', eventCreateDto)
            const localVarPath = `/api/event-producer/v1/event-producer/create-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEventPhoto: async (eventId: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('eventProducerControllerCreateEventPhoto', 'eventId', eventId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventId}/upload-photo`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {string} name 
         * @param {string} signature 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEventTerms: async (eventId: string, name: string, signature: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('eventProducerControllerCreateEventTerms', 'eventId', eventId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('eventProducerControllerCreateEventTerms', 'name', name)
            // verify required parameter 'signature' is not null or undefined
            assertParamExists('eventProducerControllerCreateEventTerms', 'signature', signature)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventId}/create-terms`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFinancialDashboard: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerControllerFinancialDashboard', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/dashboard-financial`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all events
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindAllEvents: async (page?: string, perPage?: string, searchable?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-producer/v1/event-producer/events/find-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (searchable !== undefined) {
                localVarQueryParameter['searchable'] = searchable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} slug Event slug
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [name] 
         * @param {Array<string>} [ticketTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindAllParticipants: async (slug: string, page?: number, perPage?: number, name?: string, ticketTitle?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventProducerControllerFindAllParticipants', 'slug', slug)
            const localVarPath = `/api/event-producer/v1/event-producer/{slug}/participants/find-all`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (ticketTitle) {
                localVarQueryParameter['ticketTitle'] = ticketTitle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindOneDashboard: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventProducerControllerFindOneDashboard', 'slug', slug)
            const localVarPath = `/api/event-producer/v1/event-producer/{slug}/dashboard`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindOneDashboardParticipantPanel: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventProducerControllerFindOneDashboardParticipantPanel', 'slug', slug)
            const localVarPath = `/api/event-producer/v1/event-producer/{slug}/dashboard/participant-panel`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGeneralDashboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-producer/v1/event-producer/general-dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGetEventsPrintAutomatic: async (page?: string, perPage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-producer/v1/event-producer/get-events-print-automatic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGetPartClient: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('eventProducerControllerGetPartClient', 'eventId', eventId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventId}/print-participant`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event
         * @param {string} slug 
         * @param {EventProducerUpdateDto} eventProducerUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerUpdateEvent: async (slug: string, eventProducerUpdateDto: EventProducerUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventProducerControllerUpdateEvent', 'slug', slug)
            // verify required parameter 'eventProducerUpdateDto' is not null or undefined
            assertParamExists('eventProducerControllerUpdateEvent', 'eventProducerUpdateDto', eventProducerUpdateDto)
            const localVarPath = `/api/event-producer/v1/event-producer/{slug}/update-event`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventProducerUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event Id
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerUpdateIsPrint: async (eventId: string, participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('eventProducerControllerUpdateIsPrint', 'eventId', eventId)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventProducerControllerUpdateIsPrint', 'participantId', participantId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventId}/print-participant`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventProducerApi - functional programming interface
 * @export
 */
export const EventProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create event
         * @param {EventCreateDto} eventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerCreateEvent(eventCreateDto: EventCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerCreateEvent(eventCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerCreateEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerCreateEventPhoto(eventId: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerCreateEventPhoto(eventId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerCreateEventPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {string} name 
         * @param {string} signature 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerCreateEventTerms(eventId: string, name: string, signature: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerCreateEventTerms(eventId, name, signature, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerCreateEventTerms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerFinancialDashboard(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDashboardPanelFinancialDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerFinancialDashboard(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerFinancialDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all events
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerFindAllEvents(page?: string, perPage?: string, searchable?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventAllResponseDtoInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerFindAllEvents(page, perPage, searchable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerFindAllEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} slug Event slug
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [name] 
         * @param {Array<string>} [ticketTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerFindAllParticipants(slug: string, page?: number, perPage?: number, name?: string, ticketTitle?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseEventParticipants>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerFindAllParticipants(slug, page, perPage, name, ticketTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerFindAllParticipants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerFindOneDashboard(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventDashboardResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerFindOneDashboard(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerFindOneDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerFindOneDashboardParticipantPanel(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindOneDashboardParticipantPanelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerFindOneDashboardParticipantPanel(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerFindOneDashboardParticipantPanel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerGeneralDashboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralDashboardResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerGeneralDashboard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerGeneralDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerGetEventsPrintAutomatic(page?: string, perPage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventsPrintAutomatic>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerGetEventsPrintAutomatic(page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerGetEventsPrintAutomatic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerGetPartClient(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventPrintAllPartsDtoInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerGetPartClient(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerGetPartClient']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update event
         * @param {string} slug 
         * @param {EventProducerUpdateDto} eventProducerUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerUpdateEvent(slug: string, eventProducerUpdateDto: EventProducerUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerUpdateEvent(slug, eventProducerUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerUpdateEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event Id
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerControllerUpdateIsPrint(eventId: string, participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerControllerUpdateIsPrint(eventId, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerApi.eventProducerControllerUpdateIsPrint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventProducerApi - factory interface
 * @export
 */
export const EventProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventProducerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create event
         * @param {EventCreateDto} eventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEvent(eventCreateDto: EventCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerControllerCreateEvent(eventCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEventPhoto(eventId: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerControllerCreateEventPhoto(eventId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a event photo
         * @param {string} eventId 
         * @param {string} name 
         * @param {string} signature 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerCreateEventTerms(eventId: string, name: string, signature: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerControllerCreateEventTerms(eventId, name, signature, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFinancialDashboard(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<EventDashboardPanelFinancialDto> {
            return localVarFp.eventProducerControllerFinancialDashboard(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all events
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindAllEvents(page?: string, perPage?: string, searchable?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<EventAllResponseDtoInner>> {
            return localVarFp.eventProducerControllerFindAllEvents(page, perPage, searchable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {string} slug Event slug
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [name] 
         * @param {Array<string>} [ticketTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindAllParticipants(slug: string, page?: number, perPage?: number, name?: string, ticketTitle?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<ResponseEventParticipants> {
            return localVarFp.eventProducerControllerFindAllParticipants(slug, page, perPage, name, ticketTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindOneDashboard(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<EventDashboardResponseDto> {
            return localVarFp.eventProducerControllerFindOneDashboard(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} slug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerFindOneDashboardParticipantPanel(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<FindOneDashboardParticipantPanelDto> {
            return localVarFp.eventProducerControllerFindOneDashboardParticipantPanel(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get general dashboard
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGeneralDashboard(options?: RawAxiosRequestConfig): AxiosPromise<GeneralDashboardResponseDto> {
            return localVarFp.eventProducerControllerGeneralDashboard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGetEventsPrintAutomatic(page?: string, perPage?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetEventsPrintAutomatic> {
            return localVarFp.eventProducerControllerGetEventsPrintAutomatic(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerGetPartClient(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<EventPrintAllPartsDtoInner>> {
            return localVarFp.eventProducerControllerGetPartClient(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event
         * @param {string} slug 
         * @param {EventProducerUpdateDto} eventProducerUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerUpdateEvent(slug: string, eventProducerUpdateDto: EventProducerUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerControllerUpdateEvent(slug, eventProducerUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event dashboard
         * @param {string} eventId Event Id
         * @param {string} participantId Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerControllerUpdateIsPrint(eventId: string, participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventProducerControllerUpdateIsPrint(eventId, participantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventProducerApi - object-oriented interface
 * @export
 * @class EventProducerApi
 * @extends {BaseAPI}
 */
export class EventProducerApi extends BaseAPI {
    /**
     * 
     * @summary Create event
     * @param {EventCreateDto} eventCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerCreateEvent(eventCreateDto: EventCreateDto, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerCreateEvent(eventCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a event photo
     * @param {string} eventId 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerCreateEventPhoto(eventId: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerCreateEventPhoto(eventId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a event photo
     * @param {string} eventId 
     * @param {string} name 
     * @param {string} signature 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerCreateEventTerms(eventId: string, name: string, signature: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerCreateEventTerms(eventId, name, signature, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get general dashboard
     * @param {string} eventSlug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerFinancialDashboard(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerFinancialDashboard(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all events
     * @param {string} [page] 
     * @param {string} [perPage] 
     * @param {string} [searchable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerFindAllEvents(page?: string, perPage?: string, searchable?: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerFindAllEvents(page, perPage, searchable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get general dashboard
     * @param {string} slug Event slug
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [name] 
     * @param {Array<string>} [ticketTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerFindAllParticipants(slug: string, page?: number, perPage?: number, name?: string, ticketTitle?: Array<string>, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerFindAllParticipants(slug, page, perPage, name, ticketTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event dashboard
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerFindOneDashboard(slug: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerFindOneDashboard(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event dashboard
     * @param {string} slug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerFindOneDashboardParticipantPanel(slug: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerFindOneDashboardParticipantPanel(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get general dashboard
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerGeneralDashboard(options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerGeneralDashboard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event dashboard
     * @param {string} [page] 
     * @param {string} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerGetEventsPrintAutomatic(page?: string, perPage?: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerGetEventsPrintAutomatic(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event dashboard
     * @param {string} eventId Event id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerGetPartClient(eventId: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerGetPartClient(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event
     * @param {string} slug 
     * @param {EventProducerUpdateDto} eventProducerUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerUpdateEvent(slug: string, eventProducerUpdateDto: EventProducerUpdateDto, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerUpdateEvent(slug, eventProducerUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event dashboard
     * @param {string} eventId Event Id
     * @param {string} participantId Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerApi
     */
    public eventProducerControllerUpdateIsPrint(eventId: string, participantId: string, options?: RawAxiosRequestConfig) {
        return EventProducerApiFp(this.configuration).eventProducerControllerUpdateIsPrint(eventId, participantId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventProducerCredentialApi - axios parameter creator
 * @export
 */
export const EventProducerCredentialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accredit a participant
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerAccreditParticipant: async (eventSlug: string, participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerAccreditParticipant', 'eventSlug', eventSlug)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerAccreditParticipant', 'participantId', participantId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/accredit`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerCheckOutInAllParticipants: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerCheckOutInAllParticipants', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/check-out-all-participants`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerFindByFacial: async (eventSlug: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerFindByFacial', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/facial`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {string} qrcode Event accreditation qrcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerFindByQrCode: async (eventSlug: string, qrcode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerFindByQrCode', 'eventSlug', eventSlug)
            // verify required parameter 'qrcode' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerFindByQrCode', 'qrcode', qrcode)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/qrcode`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (qrcode !== undefined) {
                localVarQueryParameter['qrcode'] = qrcode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerGetEventConfig: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerGetEventConfig', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/event-config`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get accreditation historic
         * @param {string} eventSlug Event slug
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerLastAccreditedParticipants: async (eventSlug: string, page?: string, perPage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerLastAccreditedParticipants', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/historic-participants`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event participant id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerRePrintParticipant: async (eventSlug: string, participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerRePrintParticipant', 'eventSlug', eventSlug)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('eventProducerAccreditationControllerRePrintParticipant', 'participantId', participantId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/accreditation/re-printer`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventProducerCredentialApi - functional programming interface
 * @export
 */
export const EventProducerCredentialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventProducerCredentialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Accredit a participant
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerAccreditParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerAccreditParticipant(eventSlug, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerAccreditParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerCheckOutInAllParticipants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerFindByFacial(eventSlug: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindByFacialResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerFindByFacial(eventSlug, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerFindByFacial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {string} qrcode Event accreditation qrcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerFindByQrCode(eventSlug: string, qrcode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerFindByQrCode(eventSlug, qrcode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerFindByQrCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerGetEventConfig(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventConfigDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerGetEventConfig(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerGetEventConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get accreditation historic
         * @param {string} eventSlug Event slug
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug: string, page?: string, perPage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LastAccreditedParticipantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerLastAccreditedParticipants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event participant id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerAccreditationControllerRePrintParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerAccreditationControllerRePrintParticipant(eventSlug, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerCredentialApi.eventProducerAccreditationControllerRePrintParticipant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventProducerCredentialApi - factory interface
 * @export
 */
export const EventProducerCredentialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventProducerCredentialApiFp(configuration)
    return {
        /**
         * 
         * @summary Accredit a participant
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event Participant ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerAccreditParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerAccreditationControllerAccreditParticipant(eventSlug, participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerFindByFacial(eventSlug: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<FindByFacialResponseDto> {
            return localVarFp.eventProducerAccreditationControllerFindByFacial(eventSlug, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event accreditation qrcode
         * @param {string} eventSlug Event slug
         * @param {string} qrcode Event accreditation qrcode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerFindByQrCode(eventSlug: string, qrcode: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerAccreditationControllerFindByQrCode(eventSlug, qrcode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerGetEventConfig(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<GetEventConfigDto> {
            return localVarFp.eventProducerAccreditationControllerGetEventConfig(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get accreditation historic
         * @param {string} eventSlug Event slug
         * @param {string} [page] 
         * @param {string} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug: string, page?: string, perPage?: string, options?: RawAxiosRequestConfig): AxiosPromise<LastAccreditedParticipantsResponse> {
            return localVarFp.eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event config
         * @param {string} eventSlug Event slug
         * @param {string} participantId Event participant id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerAccreditationControllerRePrintParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eventProducerAccreditationControllerRePrintParticipant(eventSlug, participantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventProducerCredentialApi - object-oriented interface
 * @export
 * @class EventProducerCredentialApi
 * @extends {BaseAPI}
 */
export class EventProducerCredentialApi extends BaseAPI {
    /**
     * 
     * @summary Accredit a participant
     * @param {string} eventSlug Event slug
     * @param {string} participantId Event Participant ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerAccreditParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerAccreditParticipant(eventSlug, participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event accreditation qrcode
     * @param {string} eventSlug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerCheckOutInAllParticipants(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event accreditation qrcode
     * @param {string} eventSlug Event slug
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerFindByFacial(eventSlug: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerFindByFacial(eventSlug, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event accreditation qrcode
     * @param {string} eventSlug Event slug
     * @param {string} qrcode Event accreditation qrcode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerFindByQrCode(eventSlug: string, qrcode: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerFindByQrCode(eventSlug, qrcode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event config
     * @param {string} eventSlug Event slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerGetEventConfig(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerGetEventConfig(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get accreditation historic
     * @param {string} eventSlug Event slug
     * @param {string} [page] 
     * @param {string} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug: string, page?: string, perPage?: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerLastAccreditedParticipants(eventSlug, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event config
     * @param {string} eventSlug Event slug
     * @param {string} participantId Event participant id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerCredentialApi
     */
    public eventProducerAccreditationControllerRePrintParticipant(eventSlug: string, participantId: string, options?: RawAxiosRequestConfig) {
        return EventProducerCredentialApiFp(this.configuration).eventProducerAccreditationControllerRePrintParticipant(eventSlug, participantId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventProducerNetworksApi - axios parameter creator
 * @export
 */
export const EventProducerNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create event networks
         * @param {string} eventSlug 
         * @param {Array<EventNetworksProducerCreateDtoInner>} eventNetworksProducerCreateDtoInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNetworkProducerControllerCreateEventNetworks: async (eventSlug: string, eventNetworksProducerCreateDtoInner: Array<EventNetworksProducerCreateDtoInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventNetworkProducerControllerCreateEventNetworks', 'eventSlug', eventSlug)
            // verify required parameter 'eventNetworksProducerCreateDtoInner' is not null or undefined
            assertParamExists('eventNetworkProducerControllerCreateEventNetworks', 'eventNetworksProducerCreateDtoInner', eventNetworksProducerCreateDtoInner)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/create-networks`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventNetworksProducerCreateDtoInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event networks
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNetworkProducerControllerFindAllEventNetworks: async (eventSlug: string, page: number, perPage: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventNetworkProducerControllerFindAllEventNetworks', 'eventSlug', eventSlug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventNetworkProducerControllerFindAllEventNetworks', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventNetworkProducerControllerFindAllEventNetworks', 'perPage', perPage)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/get-networks`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventProducerNetworksApi - functional programming interface
 * @export
 */
export const EventProducerNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventProducerNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create event networks
         * @param {string} eventSlug 
         * @param {Array<EventNetworksProducerCreateDtoInner>} eventNetworksProducerCreateDtoInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventNetworkProducerControllerCreateEventNetworks(eventSlug: string, eventNetworksProducerCreateDtoInner: Array<EventNetworksProducerCreateDtoInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventNetworkProducerControllerCreateEventNetworks(eventSlug, eventNetworksProducerCreateDtoInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerNetworksApi.eventNetworkProducerControllerCreateEventNetworks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event networks
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventNetworkProducerControllerFindAllEventNetworks(eventSlug: string, page: number, perPage: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventNetworksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventNetworkProducerControllerFindAllEventNetworks(eventSlug, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerNetworksApi.eventNetworkProducerControllerFindAllEventNetworks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventProducerNetworksApi - factory interface
 * @export
 */
export const EventProducerNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventProducerNetworksApiFp(configuration)
    return {
        /**
         * 
         * @summary Create event networks
         * @param {string} eventSlug 
         * @param {Array<EventNetworksProducerCreateDtoInner>} eventNetworksProducerCreateDtoInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNetworkProducerControllerCreateEventNetworks(eventSlug: string, eventNetworksProducerCreateDtoInner: Array<EventNetworksProducerCreateDtoInner>, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventNetworkProducerControllerCreateEventNetworks(eventSlug, eventNetworksProducerCreateDtoInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event networks
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventNetworkProducerControllerFindAllEventNetworks(eventSlug: string, page: number, perPage: number, options?: RawAxiosRequestConfig): AxiosPromise<EventNetworksResponse> {
            return localVarFp.eventNetworkProducerControllerFindAllEventNetworks(eventSlug, page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventProducerNetworksApi - object-oriented interface
 * @export
 * @class EventProducerNetworksApi
 * @extends {BaseAPI}
 */
export class EventProducerNetworksApi extends BaseAPI {
    /**
     * 
     * @summary Create event networks
     * @param {string} eventSlug 
     * @param {Array<EventNetworksProducerCreateDtoInner>} eventNetworksProducerCreateDtoInner 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerNetworksApi
     */
    public eventNetworkProducerControllerCreateEventNetworks(eventSlug: string, eventNetworksProducerCreateDtoInner: Array<EventNetworksProducerCreateDtoInner>, options?: RawAxiosRequestConfig) {
        return EventProducerNetworksApiFp(this.configuration).eventNetworkProducerControllerCreateEventNetworks(eventSlug, eventNetworksProducerCreateDtoInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event networks
     * @param {string} eventSlug 
     * @param {number} page 
     * @param {number} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerNetworksApi
     */
    public eventNetworkProducerControllerFindAllEventNetworks(eventSlug: string, page: number, perPage: number, options?: RawAxiosRequestConfig) {
        return EventProducerNetworksApiFp(this.configuration).eventNetworkProducerControllerFindAllEventNetworks(eventSlug, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventProducerStaffApi - axios parameter creator
 * @export
 */
export const EventProducerStaffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create event staff
         * @param {string} eventSlug 
         * @param {EventProducerCreateStaffDto} eventProducerCreateStaffDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerCreateStaff: async (eventSlug: string, eventProducerCreateStaffDto: EventProducerCreateStaffDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerStaffControllerCreateStaff', 'eventSlug', eventSlug)
            // verify required parameter 'eventProducerCreateStaffDto' is not null or undefined
            assertParamExists('eventProducerStaffControllerCreateStaff', 'eventProducerCreateStaffDto', eventProducerCreateStaffDto)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/staff/create`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventProducerCreateStaffDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete event staff
         * @param {string} eventSlug 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerDelete: async (eventSlug: string, staffId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerStaffControllerDelete', 'eventSlug', eventSlug)
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('eventProducerStaffControllerDelete', 'staffId', staffId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/staff/delete/{staffId}`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)))
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List event staff
         * @param {string} eventSlug 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerListEventStaff: async (eventSlug: string, page?: number, perPage?: number, staffEmail?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerStaffControllerListEventStaff', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/staff/list`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (staffEmail !== undefined) {
                localVarQueryParameter['staffEmail'] = staffEmail;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List event staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffName] 
         * @param {string} [staffEmail] 
         * @param {string} [eventTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerRecommendStaffs: async (page?: number, perPage?: number, staffName?: string, staffEmail?: string, eventTitle?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-producer/v1/event-producer/recommend-staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (staffName !== undefined) {
                localVarQueryParameter['staffName'] = staffName;
            }

            if (staffEmail !== undefined) {
                localVarQueryParameter['staffEmail'] = staffEmail;
            }

            if (eventTitle !== undefined) {
                localVarQueryParameter['eventTitle'] = eventTitle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Resend invite email to staff
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerResendInviteEmail: async (staffId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'staffId' is not null or undefined
            assertParamExists('eventProducerStaffControllerResendInviteEmail', 'staffId', staffId)
            const localVarPath = `/api/event-producer/v1/event-producer/staff/resend-invite-email/{staffId}`
                .replace(`{${"staffId"}}`, encodeURIComponent(String(staffId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve events that the user is staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerStaffEvents: async (page?: number, perPage?: number, searchable?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event-producer/v1/event-producer/staff/get-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (searchable !== undefined) {
                localVarQueryParameter['searchable'] = searchable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event staff
         * @param {string} eventSlug 
         * @param {string} [acceptedInvite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerUpdateEventStaff: async (eventSlug: string, acceptedInvite?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventProducerStaffControllerUpdateEventStaff', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/staff/invite`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptedInvite !== undefined) {
                localVarQueryParameter['acceptedInvite'] = acceptedInvite;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventProducerStaffApi - functional programming interface
 * @export
 */
export const EventProducerStaffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventProducerStaffApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create event staff
         * @param {string} eventSlug 
         * @param {EventProducerCreateStaffDto} eventProducerCreateStaffDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerCreateStaff(eventSlug: string, eventProducerCreateStaffDto: EventProducerCreateStaffDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerCreateStaff(eventSlug, eventProducerCreateStaffDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerCreateStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete event staff
         * @param {string} eventSlug 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerDelete(eventSlug: string, staffId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerDelete(eventSlug, staffId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List event staff
         * @param {string} eventSlug 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerListEventStaff(eventSlug: string, page?: number, perPage?: number, staffEmail?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventStaffsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerListEventStaff(eventSlug, page, perPage, staffEmail, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerListEventStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List event staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffName] 
         * @param {string} [staffEmail] 
         * @param {string} [eventTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerRecommendStaffs(page?: number, perPage?: number, staffName?: string, staffEmail?: string, eventTitle?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventProducerRecommendedStaffs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerRecommendStaffs(page, perPage, staffName, staffEmail, eventTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerRecommendStaffs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Resend invite email to staff
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerResendInviteEmail(staffId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerResendInviteEmail(staffId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerResendInviteEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve events that the user is staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerStaffEvents(page?: number, perPage?: number, searchable?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseStaffEvents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerStaffEvents(page, perPage, searchable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerStaffEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update event staff
         * @param {string} eventSlug 
         * @param {string} [acceptedInvite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventProducerStaffControllerUpdateEventStaff(eventSlug: string, acceptedInvite?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventProducerStaffControllerUpdateEventStaff(eventSlug, acceptedInvite, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerStaffApi.eventProducerStaffControllerUpdateEventStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventProducerStaffApi - factory interface
 * @export
 */
export const EventProducerStaffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventProducerStaffApiFp(configuration)
    return {
        /**
         * 
         * @summary Create event staff
         * @param {string} eventSlug 
         * @param {EventProducerCreateStaffDto} eventProducerCreateStaffDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerCreateStaff(eventSlug: string, eventProducerCreateStaffDto: EventProducerCreateStaffDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerStaffControllerCreateStaff(eventSlug, eventProducerCreateStaffDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete event staff
         * @param {string} eventSlug 
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerDelete(eventSlug: string, staffId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerStaffControllerDelete(eventSlug, staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List event staff
         * @param {string} eventSlug 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffEmail] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerListEventStaff(eventSlug: string, page?: number, perPage?: number, staffEmail?: string, options?: RawAxiosRequestConfig): AxiosPromise<EventStaffsResponse> {
            return localVarFp.eventProducerStaffControllerListEventStaff(eventSlug, page, perPage, staffEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List event staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [staffName] 
         * @param {string} [staffEmail] 
         * @param {string} [eventTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerRecommendStaffs(page?: number, perPage?: number, staffName?: string, staffEmail?: string, eventTitle?: string, options?: RawAxiosRequestConfig): AxiosPromise<EventProducerRecommendedStaffs> {
            return localVarFp.eventProducerStaffControllerRecommendStaffs(page, perPage, staffName, staffEmail, eventTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Resend invite email to staff
         * @param {string} staffId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerResendInviteEmail(staffId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerStaffControllerResendInviteEmail(staffId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve events that the user is staff
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {string} [searchable] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerStaffEvents(page?: number, perPage?: number, searchable?: string, options?: RawAxiosRequestConfig): AxiosPromise<ResponseStaffEvents> {
            return localVarFp.eventProducerStaffControllerStaffEvents(page, perPage, searchable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event staff
         * @param {string} eventSlug 
         * @param {string} [acceptedInvite] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventProducerStaffControllerUpdateEventStaff(eventSlug: string, acceptedInvite?: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventProducerStaffControllerUpdateEventStaff(eventSlug, acceptedInvite, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventProducerStaffApi - object-oriented interface
 * @export
 * @class EventProducerStaffApi
 * @extends {BaseAPI}
 */
export class EventProducerStaffApi extends BaseAPI {
    /**
     * 
     * @summary Create event staff
     * @param {string} eventSlug 
     * @param {EventProducerCreateStaffDto} eventProducerCreateStaffDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerCreateStaff(eventSlug: string, eventProducerCreateStaffDto: EventProducerCreateStaffDto, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerCreateStaff(eventSlug, eventProducerCreateStaffDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete event staff
     * @param {string} eventSlug 
     * @param {string} staffId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerDelete(eventSlug: string, staffId: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerDelete(eventSlug, staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List event staff
     * @param {string} eventSlug 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [staffEmail] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerListEventStaff(eventSlug: string, page?: number, perPage?: number, staffEmail?: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerListEventStaff(eventSlug, page, perPage, staffEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List event staff
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [staffName] 
     * @param {string} [staffEmail] 
     * @param {string} [eventTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerRecommendStaffs(page?: number, perPage?: number, staffName?: string, staffEmail?: string, eventTitle?: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerRecommendStaffs(page, perPage, staffName, staffEmail, eventTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Resend invite email to staff
     * @param {string} staffId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerResendInviteEmail(staffId: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerResendInviteEmail(staffId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve events that the user is staff
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {string} [searchable] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerStaffEvents(page?: number, perPage?: number, searchable?: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerStaffEvents(page, perPage, searchable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event staff
     * @param {string} eventSlug 
     * @param {string} [acceptedInvite] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerStaffApi
     */
    public eventProducerStaffControllerUpdateEventStaff(eventSlug: string, acceptedInvite?: string, options?: RawAxiosRequestConfig) {
        return EventProducerStaffApiFp(this.configuration).eventProducerStaffControllerUpdateEventStaff(eventSlug, acceptedInvite, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventProducerTicketsApi - axios parameter creator
 * @export
 */
export const EventProducerTicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create event ticket
         * @param {string} eventSlug 
         * @param {EventTicketCreateDto} eventTicketCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreateEventTicket: async (eventSlug: string, eventTicketCreateDto: EventTicketCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreateEventTicket', 'eventSlug', eventSlug)
            // verify required parameter 'eventTicketCreateDto' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreateEventTicket', 'eventTicketCreateDto', eventTicketCreateDto)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/create-ticket`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventTicketCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event ticket cupom
         * @param {string} eventSlug 
         * @param {EventTicketCouponsDto} eventTicketCouponsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreateEventTicketCoupons: async (eventSlug: string, eventTicketCouponsDto: EventTicketCouponsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreateEventTicketCoupons', 'eventSlug', eventSlug)
            // verify required parameter 'eventTicketCouponsDto' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreateEventTicketCoupons', 'eventTicketCouponsDto', eventTicketCouponsDto)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/create-cupom`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventTicketCouponsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create invite link by private ticket
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreatePrivateTicketLink: async (eventSlug: string, ticketBatchId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreatePrivateTicketLink', 'eventSlug', eventSlug)
            // verify required parameter 'ticketBatchId' is not null or undefined
            assertParamExists('eventTicketProducerControllerCreatePrivateTicketLink', 'ticketBatchId', ticketBatchId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/create-private-link/{ticketBatchId}`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)))
                .replace(`{${"ticketBatchId"}}`, encodeURIComponent(String(ticketBatchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event cupons dash
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCuponsDashboard: async (eventSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerCuponsDashboard', 'eventSlug', eventSlug)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/dashboard-cupons`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event tickets
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {boolean} [isPrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerFindAllEventTicket: async (eventSlug: string, page: number, perPage: number, title?: string, isPrivate?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicket', 'eventSlug', eventSlug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicket', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicket', 'perPage', perPage)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/get-tickets`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (isPrivate !== undefined) {
                localVarQueryParameter['isPrivate'] = isPrivate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get event cupons
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerFindAllEventTicketCoupons: async (eventSlug: string, page: number, perPage: number, title?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicketCoupons', 'eventSlug', eventSlug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicketCoupons', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventTicketProducerControllerFindAllEventTicketCoupons', 'perPage', perPage)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/get-cupons`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all links with one ticket
         * @param {string} eventSlug 
         * @param {string} ticketId 
         * @param {string} ticketPriceId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerGetAllLinksWithOneTicket: async (eventSlug: string, ticketId: string, ticketPriceId: string, page: number, perPage: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerGetAllLinksWithOneTicket', 'eventSlug', eventSlug)
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('eventTicketProducerControllerGetAllLinksWithOneTicket', 'ticketId', ticketId)
            // verify required parameter 'ticketPriceId' is not null or undefined
            assertParamExists('eventTicketProducerControllerGetAllLinksWithOneTicket', 'ticketPriceId', ticketPriceId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventTicketProducerControllerGetAllLinksWithOneTicket', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventTicketProducerControllerGetAllLinksWithOneTicket', 'perPage', perPage)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/tickets/{ticketId}/{ticketPriceId}/links`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)))
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)))
                .replace(`{${"ticketPriceId"}}`, encodeURIComponent(String(ticketPriceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send invite link participant by email
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerSendInviteLinkByEmail: async (eventSlug: string, ticketBatchId: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerSendInviteLinkByEmail', 'eventSlug', eventSlug)
            // verify required parameter 'ticketBatchId' is not null or undefined
            assertParamExists('eventTicketProducerControllerSendInviteLinkByEmail', 'ticketBatchId', ticketBatchId)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/send-invite-link-by-email/{ticketBatchId}`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)))
                .replace(`{${"ticketBatchId"}}`, encodeURIComponent(String(ticketBatchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update event ticket
         * @param {string} eventSlug 
         * @param {string} eventTicketId 
         * @param {EventTicketUpdateDto} eventTicketUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerUpdateEventTicket: async (eventSlug: string, eventTicketId: string, eventTicketUpdateDto: EventTicketUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventSlug' is not null or undefined
            assertParamExists('eventTicketProducerControllerUpdateEventTicket', 'eventSlug', eventSlug)
            // verify required parameter 'eventTicketId' is not null or undefined
            assertParamExists('eventTicketProducerControllerUpdateEventTicket', 'eventTicketId', eventTicketId)
            // verify required parameter 'eventTicketUpdateDto' is not null or undefined
            assertParamExists('eventTicketProducerControllerUpdateEventTicket', 'eventTicketUpdateDto', eventTicketUpdateDto)
            const localVarPath = `/api/event-producer/v1/event-producer/{eventSlug}/update-ticket/{eventTicketId}`
                .replace(`{${"eventSlug"}}`, encodeURIComponent(String(eventSlug)))
                .replace(`{${"eventTicketId"}}`, encodeURIComponent(String(eventTicketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventTicketUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventProducerTicketsApi - functional programming interface
 * @export
 */
export const EventProducerTicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventProducerTicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create event ticket
         * @param {string} eventSlug 
         * @param {EventTicketCreateDto} eventTicketCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerCreateEventTicket(eventSlug: string, eventTicketCreateDto: EventTicketCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerCreateEventTicket(eventSlug, eventTicketCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerCreateEventTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event ticket cupom
         * @param {string} eventSlug 
         * @param {EventTicketCouponsDto} eventTicketCouponsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerCreateEventTicketCoupons(eventSlug: string, eventTicketCouponsDto: EventTicketCouponsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerCreateEventTicketCoupons(eventSlug, eventTicketCouponsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerCreateEventTicketCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create invite link by private ticket
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerCreatePrivateTicketLink(eventSlug: string, ticketBatchId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketLinkCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerCreatePrivateTicketLink(eventSlug, ticketBatchId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerCreatePrivateTicketLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event cupons dash
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerCuponsDashboard(eventSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketCouponDashboardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerCuponsDashboard(eventSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerCuponsDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event tickets
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {boolean} [isPrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerFindAllEventTicket(eventSlug: string, page: number, perPage: number, title?: string, isPrivate?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerFindAllEventTicket(eventSlug, page, perPage, title, isPrivate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerFindAllEventTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get event cupons
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug: string, page: number, perPage: number, title?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketCouponsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug, page, perPage, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerFindAllEventTicketCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all links with one ticket
         * @param {string} eventSlug 
         * @param {string} ticketId 
         * @param {string} ticketPriceId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug: string, ticketId: string, ticketPriceId: string, page: number, perPage: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketLinkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug, ticketId, ticketPriceId, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerGetAllLinksWithOneTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send invite link participant by email
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerSendInviteLinkByEmail(eventSlug: string, ticketBatchId: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventTicketLinkByEmailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerSendInviteLinkByEmail(eventSlug, ticketBatchId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerSendInviteLinkByEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update event ticket
         * @param {string} eventSlug 
         * @param {string} eventTicketId 
         * @param {EventTicketUpdateDto} eventTicketUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventTicketProducerControllerUpdateEventTicket(eventSlug: string, eventTicketId: string, eventTicketUpdateDto: EventTicketUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventTicketProducerControllerUpdateEventTicket(eventSlug, eventTicketId, eventTicketUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventProducerTicketsApi.eventTicketProducerControllerUpdateEventTicket']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventProducerTicketsApi - factory interface
 * @export
 */
export const EventProducerTicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventProducerTicketsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create event ticket
         * @param {string} eventSlug 
         * @param {EventTicketCreateDto} eventTicketCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreateEventTicket(eventSlug: string, eventTicketCreateDto: EventTicketCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventTicketProducerControllerCreateEventTicket(eventSlug, eventTicketCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event ticket cupom
         * @param {string} eventSlug 
         * @param {EventTicketCouponsDto} eventTicketCouponsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreateEventTicketCoupons(eventSlug: string, eventTicketCouponsDto: EventTicketCouponsDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventTicketProducerControllerCreateEventTicketCoupons(eventSlug, eventTicketCouponsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create invite link by private ticket
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCreatePrivateTicketLink(eventSlug: string, ticketBatchId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketLinkCreateResponseDto> {
            return localVarFp.eventTicketProducerControllerCreatePrivateTicketLink(eventSlug, ticketBatchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event cupons dash
         * @param {string} eventSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerCuponsDashboard(eventSlug: string, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketCouponDashboardDto> {
            return localVarFp.eventTicketProducerControllerCuponsDashboard(eventSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event tickets
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {boolean} [isPrivate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerFindAllEventTicket(eventSlug: string, page: number, perPage: number, title?: string, isPrivate?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketsResponse> {
            return localVarFp.eventTicketProducerControllerFindAllEventTicket(eventSlug, page, perPage, title, isPrivate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get event cupons
         * @param {string} eventSlug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {string} [title] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug: string, page: number, perPage: number, title?: string, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketCouponsResponse> {
            return localVarFp.eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug, page, perPage, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all links with one ticket
         * @param {string} eventSlug 
         * @param {string} ticketId 
         * @param {string} ticketPriceId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug: string, ticketId: string, ticketPriceId: string, page: number, perPage: number, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketLinkResponse> {
            return localVarFp.eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug, ticketId, ticketPriceId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send invite link participant by email
         * @param {string} eventSlug 
         * @param {string} ticketBatchId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerSendInviteLinkByEmail(eventSlug: string, ticketBatchId: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<EventTicketLinkByEmailResponse> {
            return localVarFp.eventTicketProducerControllerSendInviteLinkByEmail(eventSlug, ticketBatchId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update event ticket
         * @param {string} eventSlug 
         * @param {string} eventTicketId 
         * @param {EventTicketUpdateDto} eventTicketUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventTicketProducerControllerUpdateEventTicket(eventSlug: string, eventTicketId: string, eventTicketUpdateDto: EventTicketUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventTicketProducerControllerUpdateEventTicket(eventSlug, eventTicketId, eventTicketUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventProducerTicketsApi - object-oriented interface
 * @export
 * @class EventProducerTicketsApi
 * @extends {BaseAPI}
 */
export class EventProducerTicketsApi extends BaseAPI {
    /**
     * 
     * @summary Create event ticket
     * @param {string} eventSlug 
     * @param {EventTicketCreateDto} eventTicketCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerCreateEventTicket(eventSlug: string, eventTicketCreateDto: EventTicketCreateDto, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerCreateEventTicket(eventSlug, eventTicketCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event ticket cupom
     * @param {string} eventSlug 
     * @param {EventTicketCouponsDto} eventTicketCouponsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerCreateEventTicketCoupons(eventSlug: string, eventTicketCouponsDto: EventTicketCouponsDto, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerCreateEventTicketCoupons(eventSlug, eventTicketCouponsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create invite link by private ticket
     * @param {string} eventSlug 
     * @param {string} ticketBatchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerCreatePrivateTicketLink(eventSlug: string, ticketBatchId: string, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerCreatePrivateTicketLink(eventSlug, ticketBatchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event cupons dash
     * @param {string} eventSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerCuponsDashboard(eventSlug: string, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerCuponsDashboard(eventSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event tickets
     * @param {string} eventSlug 
     * @param {number} page 
     * @param {number} perPage 
     * @param {string} [title] 
     * @param {boolean} [isPrivate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerFindAllEventTicket(eventSlug: string, page: number, perPage: number, title?: string, isPrivate?: boolean, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerFindAllEventTicket(eventSlug, page, perPage, title, isPrivate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get event cupons
     * @param {string} eventSlug 
     * @param {number} page 
     * @param {number} perPage 
     * @param {string} [title] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug: string, page: number, perPage: number, title?: string, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerFindAllEventTicketCoupons(eventSlug, page, perPage, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all links with one ticket
     * @param {string} eventSlug 
     * @param {string} ticketId 
     * @param {string} ticketPriceId 
     * @param {number} page 
     * @param {number} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug: string, ticketId: string, ticketPriceId: string, page: number, perPage: number, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerGetAllLinksWithOneTicket(eventSlug, ticketId, ticketPriceId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send invite link participant by email
     * @param {string} eventSlug 
     * @param {string} ticketBatchId 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerSendInviteLinkByEmail(eventSlug: string, ticketBatchId: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerSendInviteLinkByEmail(eventSlug, ticketBatchId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update event ticket
     * @param {string} eventSlug 
     * @param {string} eventTicketId 
     * @param {EventTicketUpdateDto} eventTicketUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventProducerTicketsApi
     */
    public eventTicketProducerControllerUpdateEventTicket(eventSlug: string, eventTicketId: string, eventTicketUpdateDto: EventTicketUpdateDto, options?: RawAxiosRequestConfig) {
        return EventProducerTicketsApiFp(this.configuration).eventTicketProducerControllerUpdateEventTicket(eventSlug, eventTicketId, eventTicketUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventQuizApi - axios parameter creator
 * @export
 */
export const EventQuizApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Alter quiz status
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerAlterQuizStatus: async (slug: string, quizId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerAlterQuizStatus', 'slug', slug)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventQuizControllerAlterQuizStatus', 'quizId', quizId)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/quiz/{quizId}/alter-status`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create event quiz
         * @param {string} slug 
         * @param {EventQuizCreateDto} eventQuizCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerCreateQuiz: async (slug: string, eventQuizCreateDto: EventQuizCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerCreateQuiz', 'slug', slug)
            // verify required parameter 'eventQuizCreateDto' is not null or undefined
            assertParamExists('eventQuizControllerCreateQuiz', 'eventQuizCreateDto', eventQuizCreateDto)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/create-quiz`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventQuizCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new quiz questions
         * @param {string} slug 
         * @param {string} quizId 
         * @param {Array<object>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerCreateQuizQuestions: async (slug: string, quizId: string, requestBody: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerCreateQuizQuestions', 'slug', slug)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventQuizControllerCreateQuizQuestions', 'quizId', quizId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('eventQuizControllerCreateQuizQuestions', 'requestBody', requestBody)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/quiz/{quizId}/create-questions`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find all quizzes for an event
         * @param {string} slug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerFindAllQuizzes: async (slug: string, page: number, perPage: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerFindAllQuizzes', 'slug', slug)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventQuizControllerFindAllQuizzes', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventQuizControllerFindAllQuizzes', 'perPage', perPage)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/find-all-quizzes`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz dashboard details
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizDashboard: async (slug: string, quizId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerQuizDashboard', 'slug', slug)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventQuizControllerQuizDashboard', 'quizId', quizId)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/quiz-dashboard/{quizId}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {string} quizParticipantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizParticipantResponse: async (slug: string, quizId: string, quizParticipantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantResponse', 'slug', slug)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantResponse', 'quizId', quizId)
            // verify required parameter 'quizParticipantId' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantResponse', 'quizParticipantId', quizParticipantId)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/quiz-participants/{quizId}/{quizParticipantId}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)))
                .replace(`{${"quizParticipantId"}}`, encodeURIComponent(String(quizParticipantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizParticipantsResponse: async (slug: string, quizId: string, page: number, perPage: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantsResponse', 'slug', slug)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantsResponse', 'quizId', quizId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantsResponse', 'page', page)
            // verify required parameter 'perPage' is not null or undefined
            assertParamExists('eventQuizControllerQuizParticipantsResponse', 'perPage', perPage)
            const localVarPath = `/api/event-quiz/v1/event-quiz/{slug}/quiz-participants/{quizId}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventQuizApi - functional programming interface
 * @export
 */
export const EventQuizApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventQuizApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Alter quiz status
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerAlterQuizStatus(slug: string, quizId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerAlterQuizStatus(slug, quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerAlterQuizStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create event quiz
         * @param {string} slug 
         * @param {EventQuizCreateDto} eventQuizCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerCreateQuiz(slug: string, eventQuizCreateDto: EventQuizCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventQuizCreatedResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerCreateQuiz(slug, eventQuizCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerCreateQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new quiz questions
         * @param {string} slug 
         * @param {string} quizId 
         * @param {Array<object>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerCreateQuizQuestions(slug: string, quizId: string, requestBody: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventQuizCreatedResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerCreateQuizQuestions(slug, quizId, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerCreateQuizQuestions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Find all quizzes for an event
         * @param {string} slug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerFindAllQuizzes(slug: string, page: number, perPage: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventQuizFindAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerFindAllQuizzes(slug, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerFindAllQuizzes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz dashboard details
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerQuizDashboard(slug: string, quizId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventQuizDashboarDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerQuizDashboard(slug, quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerQuizDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {string} quizParticipantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerQuizParticipantResponse(slug: string, quizId: string, quizParticipantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventParticipantResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerQuizParticipantResponse(slug, quizId, quizParticipantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerQuizParticipantResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventQuizControllerQuizParticipantsResponse(slug: string, quizId: string, page: number, perPage: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventQuizParticipantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventQuizControllerQuizParticipantsResponse(slug, quizId, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventQuizApi.eventQuizControllerQuizParticipantsResponse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventQuizApi - factory interface
 * @export
 */
export const EventQuizApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventQuizApiFp(configuration)
    return {
        /**
         * 
         * @summary Alter quiz status
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerAlterQuizStatus(slug: string, quizId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eventQuizControllerAlterQuizStatus(slug, quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create event quiz
         * @param {string} slug 
         * @param {EventQuizCreateDto} eventQuizCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerCreateQuiz(slug: string, eventQuizCreateDto: EventQuizCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<EventQuizCreatedResponseDto> {
            return localVarFp.eventQuizControllerCreateQuiz(slug, eventQuizCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new quiz questions
         * @param {string} slug 
         * @param {string} quizId 
         * @param {Array<object>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerCreateQuizQuestions(slug: string, quizId: string, requestBody: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<EventQuizCreatedResponseDto> {
            return localVarFp.eventQuizControllerCreateQuizQuestions(slug, quizId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find all quizzes for an event
         * @param {string} slug 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerFindAllQuizzes(slug: string, page: number, perPage: number, options?: RawAxiosRequestConfig): AxiosPromise<EventQuizFindAllResponse> {
            return localVarFp.eventQuizControllerFindAllQuizzes(slug, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz dashboard details
         * @param {string} slug 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizDashboard(slug: string, quizId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventQuizDashboarDto> {
            return localVarFp.eventQuizControllerQuizDashboard(slug, quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {string} quizParticipantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizParticipantResponse(slug: string, quizId: string, quizParticipantId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventParticipantResponseDto> {
            return localVarFp.eventQuizControllerQuizParticipantResponse(slug, quizId, quizParticipantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get quiz participants responses
         * @param {string} slug 
         * @param {string} quizId 
         * @param {number} page 
         * @param {number} perPage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventQuizControllerQuizParticipantsResponse(slug: string, quizId: string, page: number, perPage: number, options?: RawAxiosRequestConfig): AxiosPromise<EventQuizParticipantsResponse> {
            return localVarFp.eventQuizControllerQuizParticipantsResponse(slug, quizId, page, perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventQuizApi - object-oriented interface
 * @export
 * @class EventQuizApi
 * @extends {BaseAPI}
 */
export class EventQuizApi extends BaseAPI {
    /**
     * 
     * @summary Alter quiz status
     * @param {string} slug 
     * @param {string} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerAlterQuizStatus(slug: string, quizId: string, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerAlterQuizStatus(slug, quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create event quiz
     * @param {string} slug 
     * @param {EventQuizCreateDto} eventQuizCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerCreateQuiz(slug: string, eventQuizCreateDto: EventQuizCreateDto, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerCreateQuiz(slug, eventQuizCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new quiz questions
     * @param {string} slug 
     * @param {string} quizId 
     * @param {Array<object>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerCreateQuizQuestions(slug: string, quizId: string, requestBody: Array<object>, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerCreateQuizQuestions(slug, quizId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find all quizzes for an event
     * @param {string} slug 
     * @param {number} page 
     * @param {number} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerFindAllQuizzes(slug: string, page: number, perPage: number, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerFindAllQuizzes(slug, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz dashboard details
     * @param {string} slug 
     * @param {string} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerQuizDashboard(slug: string, quizId: string, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerQuizDashboard(slug, quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz participants responses
     * @param {string} slug 
     * @param {string} quizId 
     * @param {string} quizParticipantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerQuizParticipantResponse(slug: string, quizId: string, quizParticipantId: string, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerQuizParticipantResponse(slug, quizId, quizParticipantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get quiz participants responses
     * @param {string} slug 
     * @param {string} quizId 
     * @param {number} page 
     * @param {number} perPage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventQuizApi
     */
    public eventQuizControllerQuizParticipantsResponse(slug: string, quizId: string, page: number, perPage: number, options?: RawAxiosRequestConfig) {
        return EventQuizApiFp(this.configuration).eventQuizControllerQuizParticipantsResponse(slug, quizId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OtpApi - axios parameter creator
 * @export
 */
export const OtpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerChangePassword: async (hash: string, number: string, password: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('otpControllerChangePassword', 'hash', hash)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('otpControllerChangePassword', 'number', number)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('otpControllerChangePassword', 'password', password)
            const localVarPath = `/api/otp/v1/otp/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerForgotPassword: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('otpControllerForgotPassword', 'email', email)
            const localVarPath = `/api/otp/v1/otp/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerValidateOtp: async (hash: string, number: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('otpControllerValidateOtp', 'hash', hash)
            // verify required parameter 'number' is not null or undefined
            assertParamExists('otpControllerValidateOtp', 'number', number)
            const localVarPath = `/api/otp/v1/otp/validate-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }

            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerVerifyEmail: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('otpControllerVerifyEmail', 'email', email)
            const localVarPath = `/api/otp/v1/otp/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerVerifyEmailCode: async (email: string, code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('otpControllerVerifyEmailCode', 'email', email)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('otpControllerVerifyEmailCode', 'code', code)
            const localVarPath = `/api/otp/v1/otp/verify-email-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtpApi - functional programming interface
 * @export
 */
export const OtpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otpControllerChangePassword(hash: string, number: string, password: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otpControllerChangePassword(hash, number, password, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OtpApi.otpControllerChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otpControllerForgotPassword(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otpControllerForgotPassword(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OtpApi.otpControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otpControllerValidateOtp(hash: string, number: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otpControllerValidateOtp(hash, number, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OtpApi.otpControllerValidateOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otpControllerVerifyEmail(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otpControllerVerifyEmail(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OtpApi.otpControllerVerifyEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async otpControllerVerifyEmailCode(email: string, code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.otpControllerVerifyEmailCode(email, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OtpApi.otpControllerVerifyEmailCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OtpApi - factory interface
 * @export
 */
export const OtpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtpApiFp(configuration)
    return {
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerChangePassword(hash: string, number: string, password: string, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.otpControllerChangePassword(hash, number, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerForgotPassword(email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.otpControllerForgotPassword(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate otp code
         * @param {string} hash 
         * @param {string} number 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerValidateOtp(hash: string, number: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.otpControllerValidateOtp(hash, number, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerVerifyEmail(email: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.otpControllerVerifyEmail(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Forgot password
         * @param {string} email 
         * @param {string} code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        otpControllerVerifyEmailCode(email: string, code: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.otpControllerVerifyEmailCode(email, code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OtpApi - object-oriented interface
 * @export
 * @class OtpApi
 * @extends {BaseAPI}
 */
export class OtpApi extends BaseAPI {
    /**
     * 
     * @summary Validate otp code
     * @param {string} hash 
     * @param {string} number 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public otpControllerChangePassword(hash: string, number: string, password: string, options?: RawAxiosRequestConfig) {
        return OtpApiFp(this.configuration).otpControllerChangePassword(hash, number, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forgot password
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public otpControllerForgotPassword(email: string, options?: RawAxiosRequestConfig) {
        return OtpApiFp(this.configuration).otpControllerForgotPassword(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate otp code
     * @param {string} hash 
     * @param {string} number 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public otpControllerValidateOtp(hash: string, number: string, options?: RawAxiosRequestConfig) {
        return OtpApiFp(this.configuration).otpControllerValidateOtp(hash, number, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forgot password
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public otpControllerVerifyEmail(email: string, options?: RawAxiosRequestConfig) {
        return OtpApiFp(this.configuration).otpControllerVerifyEmail(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Forgot password
     * @param {string} email 
     * @param {string} code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtpApi
     */
    public otpControllerVerifyEmailCode(email: string, code: string, options?: RawAxiosRequestConfig) {
        return OtpApiFp(this.configuration).otpControllerVerifyEmailCode(email, code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SponsorUserApi - axios parameter creator
 * @export
 */
export const SponsorUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Sponsor User
         * @param {CreateSponsorUserDto} createSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerCreateSponsorUser: async (createSponsorUserDto: CreateSponsorUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSponsorUserDto' is not null or undefined
            assertParamExists('sponsorUserControllerCreateSponsorUser', 'createSponsorUserDto', createSponsorUserDto)
            const localVarPath = `/api/sponsor-user/v1/sponsor-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSponsorUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sponsor User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerGetSponserUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sponsor-user/v1/sponsor-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Sponsor User
         * @param {UpdateSponsorUserDto} updateSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerUpdate: async (updateSponsorUserDto: UpdateSponsorUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateSponsorUserDto' is not null or undefined
            assertParamExists('sponsorUserControllerUpdate', 'updateSponsorUserDto', updateSponsorUserDto)
            const localVarPath = `/api/sponsor-user/v1/sponsor-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSponsorUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SponsorUserApi - functional programming interface
 * @export
 */
export const SponsorUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SponsorUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Sponsor User
         * @param {CreateSponsorUserDto} createSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorUserControllerCreateSponsorUser(createSponsorUserDto: CreateSponsorUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSponsorUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorUserControllerCreateSponsorUser(createSponsorUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SponsorUserApi.sponsorUserControllerCreateSponsorUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Sponsor User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorUserControllerGetSponserUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSponsorUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorUserControllerGetSponserUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SponsorUserApi.sponsorUserControllerGetSponserUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Sponsor User
         * @param {UpdateSponsorUserDto} updateSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorUserControllerUpdate(updateSponsorUserDto: UpdateSponsorUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSponsorUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorUserControllerUpdate(updateSponsorUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SponsorUserApi.sponsorUserControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SponsorUserApi - factory interface
 * @export
 */
export const SponsorUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SponsorUserApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Sponsor User
         * @param {CreateSponsorUserDto} createSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerCreateSponsorUser(createSponsorUserDto: CreateSponsorUserDto, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSponsorUserDto> {
            return localVarFp.sponsorUserControllerCreateSponsorUser(createSponsorUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sponsor User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerGetSponserUser(options?: RawAxiosRequestConfig): AxiosPromise<ResponseSponsorUserDto> {
            return localVarFp.sponsorUserControllerGetSponserUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Sponsor User
         * @param {UpdateSponsorUserDto} updateSponsorUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorUserControllerUpdate(updateSponsorUserDto: UpdateSponsorUserDto, options?: RawAxiosRequestConfig): AxiosPromise<ResponseSponsorUserDto> {
            return localVarFp.sponsorUserControllerUpdate(updateSponsorUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SponsorUserApi - object-oriented interface
 * @export
 * @class SponsorUserApi
 * @extends {BaseAPI}
 */
export class SponsorUserApi extends BaseAPI {
    /**
     * 
     * @summary Create Sponsor User
     * @param {CreateSponsorUserDto} createSponsorUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorUserApi
     */
    public sponsorUserControllerCreateSponsorUser(createSponsorUserDto: CreateSponsorUserDto, options?: RawAxiosRequestConfig) {
        return SponsorUserApiFp(this.configuration).sponsorUserControllerCreateSponsorUser(createSponsorUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sponsor User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorUserApi
     */
    public sponsorUserControllerGetSponserUser(options?: RawAxiosRequestConfig) {
        return SponsorUserApiFp(this.configuration).sponsorUserControllerGetSponserUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Sponsor User
     * @param {UpdateSponsorUserDto} updateSponsorUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SponsorUserApi
     */
    public sponsorUserControllerUpdate(updateSponsorUserDto: UpdateSponsorUserDto, options?: RawAxiosRequestConfig) {
        return SponsorUserApiFp(this.configuration).sponsorUserControllerUpdate(updateSponsorUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserProducerApi - axios parameter creator
 * @export
 */
export const UserProducerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Register user producer
         * @param {UserProducerCreateDto} userProducerCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerCreateUserProducer: async (userProducerCreateDto: UserProducerCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProducerCreateDto' is not null or undefined
            assertParamExists('userProducerControllerCreateUserProducer', 'userProducerCreateDto', userProducerCreateDto)
            const localVarPath = `/api/user-producer/v1/user-producer/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProducerCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user production
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerFindOneUserProducer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-producer/v1/user-producer/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish register user producer
         * @param {UserProducerFinishSignUpDto} userProducerFinishSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerFinishSignUp: async (userProducerFinishSignUpDto: UserProducerFinishSignUpDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProducerFinishSignUpDto' is not null or undefined
            assertParamExists('userProducerControllerFinishSignUp', 'userProducerFinishSignUpDto', userProducerFinishSignUpDto)
            const localVarPath = `/api/user-producer/v1/user-producer/finish-register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProducerFinishSignUpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUpdatePassword: async (oldPassword: string, newPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oldPassword' is not null or undefined
            assertParamExists('userProducerControllerUpdatePassword', 'oldPassword', oldPassword)
            // verify required parameter 'newPassword' is not null or undefined
            assertParamExists('userProducerControllerUpdatePassword', 'newPassword', newPassword)
            const localVarPath = `/api/user-producer/v1/user-producer/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (oldPassword !== undefined) {
                localVarQueryParameter['oldPassword'] = oldPassword;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a user facial photo
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadFacialPhoto: async (email: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('userProducerControllerUploadFacialPhoto', 'email', email)
            const localVarPath = `/api/user-producer/v1/user-producer/profile/upload-facial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a user profile photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadProfilePhoto: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-producer/v1/user-producer/profile/upload-photo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadVideo: async (file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-producer/video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User have facial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUserHaveFacial: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-producer/v1/user/have-facial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserProducerApi - functional programming interface
 * @export
 */
export const UserProducerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserProducerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Register user producer
         * @param {UserProducerCreateDto} userProducerCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerCreateUserProducer(userProducerCreateDto: UserProducerCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerCreateUserProducer(userProducerCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerCreateUserProducer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get user production
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerFindOneUserProducer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProducerResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerFindOneUserProducer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerFindOneUserProducer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Finish register user producer
         * @param {UserProducerFinishSignUpDto} userProducerFinishSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerFinishSignUp(userProducerFinishSignUpDto: UserProducerFinishSignUpDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerFinishSignUp(userProducerFinishSignUpDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerFinishSignUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change password
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerUpdatePassword(oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerUpdatePassword(oldPassword, newPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerUpdatePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a user facial photo
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerUploadFacialPhoto(email: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerUploadFacialPhoto(email, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerUploadFacialPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload a user profile photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerUploadProfilePhoto(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerUploadProfilePhoto(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerUploadProfilePhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerUploadVideo(file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerUploadVideo(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerUploadVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User have facial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userProducerControllerUserHaveFacial(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userProducerControllerUserHaveFacial(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserProducerApi.userProducerControllerUserHaveFacial']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserProducerApi - factory interface
 * @export
 */
export const UserProducerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserProducerApiFp(configuration)
    return {
        /**
         * 
         * @summary Register user producer
         * @param {UserProducerCreateDto} userProducerCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerCreateUserProducer(userProducerCreateDto: UserProducerCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.userProducerControllerCreateUserProducer(userProducerCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user production
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerFindOneUserProducer(options?: RawAxiosRequestConfig): AxiosPromise<UserProducerResponseDto> {
            return localVarFp.userProducerControllerFindOneUserProducer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finish register user producer
         * @param {UserProducerFinishSignUpDto} userProducerFinishSignUpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerFinishSignUp(userProducerFinishSignUpDto: UserProducerFinishSignUpDto, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.userProducerControllerFinishSignUp(userProducerFinishSignUpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change password
         * @param {string} oldPassword 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUpdatePassword(oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.userProducerControllerUpdatePassword(oldPassword, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a user facial photo
         * @param {string} email 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadFacialPhoto(email: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.userProducerControllerUploadFacialPhoto(email, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a user profile photo
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadProfilePhoto(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.userProducerControllerUploadProfilePhoto(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUploadVideo(file?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userProducerControllerUploadVideo(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User have facial
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userProducerControllerUserHaveFacial(options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.userProducerControllerUserHaveFacial(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserProducerApi - object-oriented interface
 * @export
 * @class UserProducerApi
 * @extends {BaseAPI}
 */
export class UserProducerApi extends BaseAPI {
    /**
     * 
     * @summary Register user producer
     * @param {UserProducerCreateDto} userProducerCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerCreateUserProducer(userProducerCreateDto: UserProducerCreateDto, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerCreateUserProducer(userProducerCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user production
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerFindOneUserProducer(options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerFindOneUserProducer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finish register user producer
     * @param {UserProducerFinishSignUpDto} userProducerFinishSignUpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerFinishSignUp(userProducerFinishSignUpDto: UserProducerFinishSignUpDto, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerFinishSignUp(userProducerFinishSignUpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change password
     * @param {string} oldPassword 
     * @param {string} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerUpdatePassword(oldPassword: string, newPassword: string, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerUpdatePassword(oldPassword, newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a user facial photo
     * @param {string} email 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerUploadFacialPhoto(email: string, file?: File, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerUploadFacialPhoto(email, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a user profile photo
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerUploadProfilePhoto(file?: File, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerUploadProfilePhoto(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerUploadVideo(file?: File, options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerUploadVideo(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User have facial
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserProducerApi
     */
    public userProducerControllerUserHaveFacial(options?: RawAxiosRequestConfig) {
        return UserProducerApiFp(this.configuration).userProducerControllerUserHaveFacial(options).then((request) => request(this.axios, this.basePath));
    }
}



